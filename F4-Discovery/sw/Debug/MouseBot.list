
MouseBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004024  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800420c  0800420c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  200001c8  080043dc  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  080043dc  00020b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cab8  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004421  00000000  00000000  0003ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  000410d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00041f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a5f  00000000  00000000  00043630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132be  00000000  00000000  0006808f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9ab7  00000000  00000000  0007b34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f08  00000000  00000000  00144e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000da8c  00000000  00000000  00147d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004194 	.word	0x08004194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	08004194 	.word	0x08004194

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	2400      	movs	r4, #0
{
 80004ce:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80004d4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d8:	4b56      	ldr	r3, [pc, #344]	; (8000634 <MX_GPIO_Init+0x16c>)
 80004da:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80004e0:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8000640 <MX_GPIO_Init+0x178>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80004e4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8000644 <MX_GPIO_Init+0x17c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80004e8:	4f53      	ldr	r7, [pc, #332]	; (8000638 <MX_GPIO_Init+0x170>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80004ea:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8000648 <MX_GPIO_Init+0x180>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ee:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800064c <MX_GPIO_Init+0x184>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f2:	f042 0210 	orr.w	r2, r2, #16
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fa:	f002 0210 	and.w	r2, r2, #16
 80004fe:	9203      	str	r2, [sp, #12]
 8000500:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	9404      	str	r4, [sp, #16]
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0204 	orr.w	r2, r2, #4
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0204 	and.w	r2, r2, #4
 8000512:	9204      	str	r2, [sp, #16]
 8000514:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	9405      	str	r4, [sp, #20]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000522:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000526:	9205      	str	r2, [sp, #20]
 8000528:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	9406      	str	r4, [sp, #24]
 800052c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052e:	f042 0201 	orr.w	r2, r2, #1
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
 8000534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000536:	f002 0201 	and.w	r2, r2, #1
 800053a:	9206      	str	r2, [sp, #24]
 800053c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	9407      	str	r4, [sp, #28]
 8000540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000542:	f042 0202 	orr.w	r2, r2, #2
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
 8000548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054a:	f002 0202 	and.w	r2, r2, #2
 800054e:	9207      	str	r2, [sp, #28]
 8000550:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000552:	9408      	str	r4, [sp, #32]
 8000554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000556:	f042 0208 	orr.w	r2, r2, #8
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0308 	and.w	r3, r3, #8
 8000562:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000564:	4622      	mov	r2, r4
 8000566:	4658      	mov	r0, fp
 8000568:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800056c:	f000 fc74 	bl	8000e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	4640      	mov	r0, r8
 8000574:	4611      	mov	r1, r2
 8000576:	f000 fc6f 	bl	8000e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800057a:	4622      	mov	r2, r4
 800057c:	4638      	mov	r0, r7
 800057e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000582:	f000 fc69 	bl	8000e58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000588:	2208      	movs	r2, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800058a:	a909      	add	r1, sp, #36	; 0x24
 800058c:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800058e:	9209      	str	r2, [sp, #36]	; 0x24
 8000590:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000598:	f000 fb5a 	bl	8000c50 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800059c:	a909      	add	r1, sp, #36	; 0x24
 800059e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005aa:	f000 fb51 	bl	8000c50 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005ae:	2305      	movs	r3, #5
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005b0:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005b2:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005b4:	4640      	mov	r0, r8
 80005b6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005b8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ba:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f000 fb45 	bl	8000c50 <HAL_GPIO_Init>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c6:	a909      	add	r1, sp, #36	; 0x24
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <MX_GPIO_Init+0x174>)
  GPIO_InitStruct.Pin = B1_Pin;
 80005ca:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005cc:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f000 fb3e 	bl	8000c50 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80005d4:	a909      	add	r1, sp, #36	; 0x24
 80005d6:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80005d8:	2204      	movs	r2, #4
 80005da:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f000 fb36 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80005e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005e8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80005ea:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80005ec:	4650      	mov	r0, sl
 80005ee:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f000 fb2a 	bl	8000c50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005fc:	a909      	add	r1, sp, #36	; 0x24
 80005fe:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000600:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000604:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060c:	f000 fb20 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000610:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000612:	4638      	mov	r0, r7
 8000614:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000616:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800061c:	f000 fb18 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000620:	a909      	add	r1, sp, #36	; 0x24
 8000622:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000624:	e9cd 6909 	strd	r6, r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800062a:	f000 fb11 	bl	8000c50 <HAL_GPIO_Init>

}
 800062e:	b00f      	add	sp, #60	; 0x3c
 8000630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40020c00 	.word	0x40020c00
 800063c:	40020000 	.word	0x40020000
 8000640:	40021000 	.word	0x40021000
 8000644:	40020800 	.word	0x40020800
 8000648:	40020400 	.word	0x40020400
 800064c:	10120000 	.word	0x10120000

08000650 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x34>)
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <MX_I2C1_Init+0x38>)
{
 8000654:	b510      	push	{r4, lr}
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4c0c      	ldr	r4, [pc, #48]	; (800068c <MX_I2C1_Init+0x3c>)
  hi2c1.Instance = I2C1;
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065e:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	2200      	movs	r2, #0
  hi2c1.Init.ClockSpeed = 100000;
 8000662:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	6119      	str	r1, [r3, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000672:	f000 fbf5 	bl	8000e60 <HAL_I2C_Init>
 8000676:	b900      	cbnz	r0, 800067a <MX_I2C1_Init+0x2a>
  {
    Error_Handler();
  }

}
 8000678:	bd10      	pop	{r4, pc}
 800067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800067e:	f000 b933 	b.w	80008e8 <Error_Handler>
 8000682:	bf00      	nop
 8000684:	200001f4 	.word	0x200001f4
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000690:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8000692:	6802      	ldr	r2, [r0, #0]
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <HAL_I2C_MspInit+0x64>)
{
 8000696:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800069a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80006a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80006a4:	9407      	str	r4, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 80006a6:	d001      	beq.n	80006ac <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a8:	b008      	add	sp, #32
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4d12      	ldr	r5, [pc, #72]	; (80006f8 <HAL_I2C_MspInit+0x68>)
 80006ae:	9401      	str	r4, [sp, #4]
 80006b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	632b      	str	r3, [r5, #48]	; 0x30
 80006ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80006c2:	f44f 7210 	mov.w	r2, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c6:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80006c8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ce:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d2:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f000 faba 	bl	8000c50 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006dc:	9402      	str	r4, [sp, #8]
 80006de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e4:	642b      	str	r3, [r5, #64]	; 0x40
 80006e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	9b02      	ldr	r3, [sp, #8]
}
 80006f0:	b008      	add	sp, #32
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	40005400 	.word	0x40005400
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020400 	.word	0x40020400

08000700 <MX_I2S3_Init>:

/* I2S3 init function */
void MX_I2S3_Init(void)
{

  hi2s3.Instance = SPI3;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2S3_Init+0x34>)
 8000702:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <MX_I2S3_Init+0x38>)
{
 8000704:	b510      	push	{r4, lr}
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4c0c      	ldr	r4, [pc, #48]	; (800073c <MX_I2S3_Init+0x3c>)
  hi2s3.Instance = SPI3;
 800070c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070e:	4618      	mov	r0, r3
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000710:	2200      	movs	r2, #0
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000712:	615c      	str	r4, [r3, #20]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000714:	6059      	str	r1, [r3, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	6119      	str	r1, [r3, #16]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000718:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800071c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	f000 fc5d 	bl	8000fe0 <HAL_I2S_Init>
 8000726:	b900      	cbnz	r0, 800072a <MX_I2S3_Init+0x2a>
  {
    Error_Handler();
  }

}
 8000728:	bd10      	pop	{r4, pc}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800072e:	f000 b8db 	b.w	80008e8 <Error_Handler>
 8000732:	bf00      	nop
 8000734:	20000248 	.word	0x20000248
 8000738:	40003c00 	.word	0x40003c00
 800073c:	00017700 	.word	0x00017700

08000740 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000740:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2sHandle->Instance==SPI3)
 8000742:	6802      	ldr	r2, [r0, #0]
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <HAL_I2S_MspInit+0x8c>)
{
 8000746:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	2400      	movs	r4, #0
  if(i2sHandle->Instance==SPI3)
 800074a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000750:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000754:	9407      	str	r4, [sp, #28]
  if(i2sHandle->Instance==SPI3)
 8000756:	d001      	beq.n	800075c <HAL_I2S_MspInit+0x1c>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000758:	b008      	add	sp, #32
 800075a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800075c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8000760:	9400      	str	r4, [sp, #0]
 8000762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000764:	481a      	ldr	r0, [pc, #104]	; (80007d0 <HAL_I2S_MspInit+0x90>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800076a:	641a      	str	r2, [r3, #64]	; 0x40
 800076c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000772:	9200      	str	r2, [sp, #0]
 8000774:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	9401      	str	r4, [sp, #4]
 8000778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077a:	f042 0201 	orr.w	r2, r2, #1
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
 8000780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000782:	f002 0201 	and.w	r2, r2, #1
 8000786:	9201      	str	r2, [sp, #4]
 8000788:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	9402      	str	r4, [sp, #8]
 800078c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078e:	f042 0204 	orr.w	r2, r2, #4
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800079e:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a0:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a2:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a4:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a6:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f000 fa50 	bl	8000c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007b0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	a903      	add	r1, sp, #12
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <HAL_I2S_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ba:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007c0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c2:	f000 fa45 	bl	8000c50 <HAL_GPIO_Init>
}
 80007c6:	b008      	add	sp, #32
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	bf00      	nop
 80007cc:	40003c00 	.word	0x40003c00
 80007d0:	40020000 	.word	0x40020000
 80007d4:	40020800 	.word	0x40020800

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	2400      	movs	r4, #0
{
 80007dc:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80007e2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80007ea:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ee:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4a22      	ldr	r2, [pc, #136]	; (800087c <SystemClock_Config+0xa4>)
 80007f4:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f6:	9407      	str	r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f8:	9403      	str	r4, [sp, #12]
 80007fa:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000804:	6411      	str	r1, [r2, #64]	; 0x40
 8000806:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000808:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800080c:	9201      	str	r2, [sp, #4]
 800080e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	9402      	str	r4, [sp, #8]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000820:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000822:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000830:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000834:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000836:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000838:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000846:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000848:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f001 fb9d 	bl	8001f88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	210f      	movs	r1, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	e9cd 1507 	strd	r1, r5, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085c:	a807      	add	r0, sp, #28
 800085e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000860:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000866:	f001 fda3 	bl	80023b0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800086a:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086c:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800086e:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000870:	e9cd 3504 	strd	r3, r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000874:	f001 fe50 	bl	8002518 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000878:	b018      	add	sp, #96	; 0x60
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <main>:
{
 8000884:	b500      	push	{lr}
 8000886:	b083      	sub	sp, #12
  HAL_Init();
 8000888:	f000 f934 	bl	8000af4 <HAL_Init>
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 800088c:	4c15      	ldr	r4, [pc, #84]	; (80008e4 <main+0x60>)
  SystemClock_Config();
 800088e:	f7ff ffa3 	bl	80007d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000892:	f7ff fe19 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000896:	f7ff fedb 	bl	8000650 <MX_I2C1_Init>
  MX_I2S3_Init();
 800089a:	f7ff ff31 	bl	8000700 <MX_I2S3_Init>
  MX_SPI1_Init();
 800089e:	f000 f825 	bl	80008ec <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008a2:	f003 f97f 	bl	8003ba4 <MX_USB_DEVICE_Init>
  mouseHID.y = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f88d 3006 	strb.w	r3, [sp, #6]
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80008ac:	2204      	movs	r2, #4
 80008ae:	eb0d 0102 	add.w	r1, sp, r2
      mouseHID.x = 20;
 80008b2:	2314      	movs	r3, #20
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80008b4:	4620      	mov	r0, r4
      mouseHID.x = 20;
 80008b6:	f88d 3005 	strb.w	r3, [sp, #5]
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80008ba:	f002 fd3d 	bl	8003338 <USBD_HID_SendReport>
      HAL_Delay(1000);
 80008be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c2:	f000 f943 	bl	8000b4c <HAL_Delay>
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80008c6:	2204      	movs	r2, #4
      mouseHID.x = -20;
 80008c8:	23ec      	movs	r3, #236	; 0xec
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80008ca:	eb0d 0102 	add.w	r1, sp, r2
 80008ce:	4620      	mov	r0, r4
      mouseHID.x = -20;
 80008d0:	f88d 3005 	strb.w	r3, [sp, #5]
      USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80008d4:	f002 fd30 	bl	8003338 <USBD_HID_SendReport>
      HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f000 f936 	bl	8000b4c <HAL_Delay>
 80008e0:	e7e4      	b.n	80008ac <main+0x28>
 80008e2:	bf00      	nop
 80008e4:	200002ec 	.word	0x200002ec

080008e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008ec:	b538      	push	{r3, r4, r5, lr}

  hspi1.Instance = SPI1;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x3c>)
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <MX_SPI1_Init+0x40>)
 80008f2:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f4:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f8:	2200      	movs	r2, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fa:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80008fe:	210a      	movs	r1, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000902:	605d      	str	r5, [r3, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000904:	619c      	str	r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000906:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000910:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000918:	f001 fece 	bl	80026b8 <HAL_SPI_Init>
 800091c:	b900      	cbnz	r0, 8000920 <MX_SPI1_Init+0x34>
  {
    Error_Handler();
  }

}
 800091e:	bd38      	pop	{r3, r4, r5, pc}
 8000920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000924:	f7ff bfe0 	b.w	80008e8 <Error_Handler>
 8000928:	20000290 	.word	0x20000290
 800092c:	40013000 	.word	0x40013000

08000930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000930:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8000932:	6801      	ldr	r1, [r0, #0]
 8000934:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_SPI_MspInit+0x60>)
{
 8000936:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 800093a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000940:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000944:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8000946:	d001      	beq.n	800094c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000948:	b009      	add	sp, #36	; 0x24
 800094a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094c:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000956:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800095a:	6451      	str	r1, [r2, #68]	; 0x44
 800095c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800095e:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8000962:	9101      	str	r1, [sp, #4]
 8000964:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	9302      	str	r3, [sp, #8]
 8000968:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800097a:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800097e:	24e0      	movs	r4, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000982:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f000 f962 	bl	8000c50 <HAL_GPIO_Init>
}
 800098c:	b009      	add	sp, #36	; 0x24
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	40013000 	.word	0x40013000
 8000994:	40020000 	.word	0x40020000

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x34>)
 800099c:	2100      	movs	r1, #0
 800099e:	9100      	str	r1, [sp, #0]
 80009a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009a6:	645a      	str	r2, [r3, #68]	; 0x44
 80009a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009ae:	9200      	str	r2, [sp, #0]
 80009b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	9101      	str	r1, [sp, #4]
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	b002      	add	sp, #8
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	e7fe      	b.n	80009d4 <HardFault_Handler>
 80009d6:	bf00      	nop

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler>
 80009da:	bf00      	nop

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	e7fe      	b.n	80009dc <BusFault_Handler>
 80009de:	bf00      	nop

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler>
 80009e2:	bf00      	nop

080009e4 <SVC_Handler>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <DebugMon_Handler>:
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <PendSV_Handler>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 b89a 	b.w	8000b28 <HAL_IncTick>

080009f4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f4:	4801      	ldr	r0, [pc, #4]	; (80009fc <OTG_FS_IRQHandler+0x8>)
 80009f6:	f000 be03 	b.w	8001600 <HAL_PCD_IRQHandler>
 80009fa:	bf00      	nop
 80009fc:	20000788 	.word	0x20000788

08000a00 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <_sbrk+0x34>)
{
 8000a02:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	b133      	cbz	r3, 8000a16 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000a08:	4418      	add	r0, r3
 8000a0a:	4669      	mov	r1, sp
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	d808      	bhi.n	8000a22 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000a10:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x38>)
 8000a18:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000a1a:	4418      	add	r0, r3
 8000a1c:	4669      	mov	r1, sp
 8000a1e:	4288      	cmp	r0, r1
 8000a20:	d9f6      	bls.n	8000a10 <_sbrk+0x10>
		errno = ENOMEM;
 8000a22:	f003 fac3 	bl	8003fac <__errno>
 8000a26:	230c      	movs	r3, #12
 8000a28:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd08      	pop	{r3, pc}
 8000a32:	bf00      	nop
 8000a34:	200001e4 	.word	0x200001e4
 8000a38:	20000b98 	.word	0x20000b98

08000a3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SystemInit+0x18>)
 8000a3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a46:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a4e:	6099      	str	r1, [r3, #8]
#endif
}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a5e:	e003      	b.n	8000a68 <LoopCopyDataInit>

08000a60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a66:	3104      	adds	r1, #4

08000a68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a70:	d3f6      	bcc.n	8000a60 <CopyDataInit>
  ldr  r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a74:	e002      	b.n	8000a7c <LoopFillZerobss>

08000a76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a78:	f842 3b04 	str.w	r3, [r2], #4

08000a7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a80:	d3f9      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffdb 	bl	8000a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f003 fa97 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fefb 	bl	8000884 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a94:	08004214 	.word	0x08004214
  ldr  r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a9c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000aa0:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8000aa4:	20000b94 	.word	0x20000b94

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_InitTick+0x3c>)
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_InitTick+0x40>)
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
{
 8000ab6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ac0:	fbb3 f0f0 	udiv	r0, r3, r0
 8000ac4:	f000 f8aa 	bl	8000c1c <HAL_SYSTICK_Config>
 8000ac8:	b908      	cbnz	r0, 8000ace <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	2d0f      	cmp	r5, #15
 8000acc:	d901      	bls.n	8000ad2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 f85a 	bl	8000b94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_InitTick+0x44>)
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	601d      	str	r5, [r3, #0]
}
 8000ae6:	bd38      	pop	{r3, r4, r5, pc}
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_Init>:
{
 8000af4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x30>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000afe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f82d 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff ffc8 	bl	8000aac <HAL_InitTick>
  HAL_MspInit();
 8000b1c:	f7ff ff3c 	bl	8000998 <HAL_MspInit>
}
 8000b20:	2000      	movs	r0, #0
 8000b22:	bd08      	pop	{r3, pc}
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x10>)
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_IncTick+0x14>)
 8000b2c:	6811      	ldr	r1, [r2, #0]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	440b      	add	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200002e8 	.word	0x200002e8
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b40:	4b01      	ldr	r3, [pc, #4]	; (8000b48 <HAL_GetTick+0x8>)
 8000b42:	6818      	ldr	r0, [r3, #0]
}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200002e8 	.word	0x200002e8

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff6 	bl	8000b40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b54:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000b56:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000b58:	d002      	beq.n	8000b60 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_Delay+0x20>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	1b40      	subs	r0, r0, r5
 8000b66:	42a0      	cmp	r0, r4
 8000b68:	d3fa      	bcc.n	8000b60 <HAL_Delay+0x14>
  {
  }
}
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b72:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b74:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000b78:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7a:	0200      	lsls	r0, r0, #8
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b88:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b8a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_NVIC_SetPriority+0x64>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9e:	f1c3 0507 	rsb	r5, r3, #7
 8000ba2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	bf28      	it	cs
 8000baa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bac:	2c06      	cmp	r4, #6
 8000bae:	d919      	bls.n	8000be4 <HAL_NVIC_SetPriority+0x50>
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8000bb6:	409c      	lsls	r4, r3
 8000bb8:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	40aa      	lsls	r2, r5
 8000bc2:	ea21 0102 	bic.w	r1, r1, r2
 8000bc6:	fa01 f203 	lsl.w	r2, r1, r3
 8000bca:	4322      	orrs	r2, r4
 8000bcc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	db0a      	blt.n	8000bea <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bdc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000be0:	bc30      	pop	{r4, r5}
 8000be2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be4:	2400      	movs	r4, #0
 8000be6:	4623      	mov	r3, r4
 8000be8:	e7e8      	b.n	8000bbc <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_NVIC_SetPriority+0x68>)
 8000bec:	f000 000f 	and.w	r0, r0, #15
 8000bf0:	4403      	add	r3, r0
 8000bf2:	761a      	strb	r2, [r3, #24]
 8000bf4:	bc30      	pop	{r4, r5}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	e000ecfc 	.word	0xe000ecfc

08000c00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c00:	2800      	cmp	r0, #0
 8000c02:	db07      	blt.n	8000c14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c04:	f000 011f 	and.w	r1, r0, #31
 8000c08:	2301      	movs	r3, #1
 8000c0a:	0940      	lsrs	r0, r0, #5
 8000c0c:	4a02      	ldr	r2, [pc, #8]	; (8000c18 <HAL_NVIC_EnableIRQ+0x18>)
 8000c0e:	408b      	lsls	r3, r1
 8000c10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	3801      	subs	r0, #1
 8000c1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c22:	d20e      	bcs.n	8000c42 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	4c08      	ldr	r4, [pc, #32]	; (8000c4c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	20f0      	movs	r0, #240	; 0xf0
 8000c2e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c32:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c34:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c36:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2001      	movs	r0, #1
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c54:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c58:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8000e50 <HAL_GPIO_Init+0x200>
{
 8000c5c:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c5e:	2400      	movs	r4, #0
 8000c60:	e003      	b.n	8000c6a <HAL_GPIO_Init+0x1a>
 8000c62:	3401      	adds	r4, #1
 8000c64:	2c10      	cmp	r4, #16
 8000c66:	f000 808c 	beq.w	8000d82 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6e:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d1f5      	bne.n	8000c62 <HAL_GPIO_Init+0x12>
 8000c76:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7a:	f026 0910 	bic.w	r9, r6, #16
 8000c7e:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8000c82:	2303      	movs	r3, #3
 8000c84:	f109 37ff 	add.w	r7, r9, #4294967295
 8000c88:	fa03 f30c 	lsl.w	r3, r3, ip
 8000c8c:	2f01      	cmp	r7, #1
 8000c8e:	ea6f 0303 	mvn.w	r3, r3
 8000c92:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c96:	d977      	bls.n	8000d88 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8000c98:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c9e:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8000ca0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca2:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca6:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca8:	fa05 f30c 	lsl.w	r3, r5, ip
 8000cac:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8000cae:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb0:	00f3      	lsls	r3, r6, #3
 8000cb2:	d5d6      	bpl.n	8000c62 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4d5f      	ldr	r5, [pc, #380]	; (8000e34 <HAL_GPIO_Init+0x1e4>)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	646b      	str	r3, [r5, #68]	; 0x44
 8000cc2:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8000cc4:	f024 0303 	bic.w	r3, r4, #3
 8000cc8:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cd0:	9501      	str	r5, [sp, #4]
 8000cd2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd6:	f004 0503 	and.w	r5, r4, #3
 8000cda:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cde:	4d56      	ldr	r5, [pc, #344]	; (8000e38 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce2:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce6:	270f      	movs	r7, #15
 8000ce8:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cec:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cee:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf2:	d01f      	beq.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000cf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cf8:	42a8      	cmp	r0, r5
 8000cfa:	d076      	beq.n	8000dea <HAL_GPIO_Init+0x19a>
 8000cfc:	4d4f      	ldr	r5, [pc, #316]	; (8000e3c <HAL_GPIO_Init+0x1ec>)
 8000cfe:	42a8      	cmp	r0, r5
 8000d00:	d079      	beq.n	8000df6 <HAL_GPIO_Init+0x1a6>
 8000d02:	4d4f      	ldr	r5, [pc, #316]	; (8000e40 <HAL_GPIO_Init+0x1f0>)
 8000d04:	42a8      	cmp	r0, r5
 8000d06:	d07c      	beq.n	8000e02 <HAL_GPIO_Init+0x1b2>
 8000d08:	4d4e      	ldr	r5, [pc, #312]	; (8000e44 <HAL_GPIO_Init+0x1f4>)
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d07f      	beq.n	8000e0e <HAL_GPIO_Init+0x1be>
 8000d0e:	4d4e      	ldr	r5, [pc, #312]	; (8000e48 <HAL_GPIO_Init+0x1f8>)
 8000d10:	42a8      	cmp	r0, r5
 8000d12:	f000 8082 	beq.w	8000e1a <HAL_GPIO_Init+0x1ca>
 8000d16:	4d4d      	ldr	r5, [pc, #308]	; (8000e4c <HAL_GPIO_Init+0x1fc>)
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	f000 8084 	beq.w	8000e26 <HAL_GPIO_Init+0x1d6>
 8000d1e:	f8df c134 	ldr.w	ip, [pc, #308]	; 8000e54 <HAL_GPIO_Init+0x204>
 8000d22:	4560      	cmp	r0, ip
 8000d24:	bf0c      	ite	eq
 8000d26:	f04f 0c07 	moveq.w	ip, #7
 8000d2a:	f04f 0c08 	movne.w	ip, #8
 8000d2e:	fa0c f509 	lsl.w	r5, ip, r9
 8000d32:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d34:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8000d36:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3c:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	bf54      	ite	pl
 8000d40:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000d42:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8000d44:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000d48:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4c:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8000d4e:	bf54      	ite	pl
 8000d50:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000d52:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8000d54:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d58:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8000d5e:	bf54      	ite	pl
 8000d60:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000d62:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8000d64:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000d68:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6c:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8000d72:	bf54      	ite	pl
 8000d74:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8000d76:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d78:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8000d7a:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	f47f af74 	bne.w	8000c6a <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8000d82:	b003      	add	sp, #12
 8000d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8000d88:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8a:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	68cf      	ldr	r7, [r1, #12]
 8000d90:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d94:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8000d98:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d9a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d9e:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da2:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da6:	40a7      	lsls	r7, r4
 8000da8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000dac:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dae:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db0:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db2:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db4:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8000db8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dba:	f47f af71 	bne.w	8000ca0 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8000dc2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc6:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8000dca:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dce:	00bf      	lsls	r7, r7, #2
 8000dd0:	f04f 0b0f 	mov.w	fp, #15
 8000dd4:	fa0b fb07 	lsl.w	fp, fp, r7
 8000dd8:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ddc:	690d      	ldr	r5, [r1, #16]
 8000dde:	40bd      	lsls	r5, r7
 8000de0:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000de4:	f8c9 5020 	str.w	r5, [r9, #32]
 8000de8:	e75a      	b.n	8000ca0 <HAL_GPIO_Init+0x50>
 8000dea:	f04f 0c01 	mov.w	ip, #1
 8000dee:	fa0c f509 	lsl.w	r5, ip, r9
 8000df2:	432f      	orrs	r7, r5
 8000df4:	e79e      	b.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000df6:	f04f 0c02 	mov.w	ip, #2
 8000dfa:	fa0c f509 	lsl.w	r5, ip, r9
 8000dfe:	432f      	orrs	r7, r5
 8000e00:	e798      	b.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000e02:	f04f 0c03 	mov.w	ip, #3
 8000e06:	fa0c f509 	lsl.w	r5, ip, r9
 8000e0a:	432f      	orrs	r7, r5
 8000e0c:	e792      	b.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000e0e:	f04f 0c04 	mov.w	ip, #4
 8000e12:	fa0c f509 	lsl.w	r5, ip, r9
 8000e16:	432f      	orrs	r7, r5
 8000e18:	e78c      	b.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000e1a:	f04f 0c05 	mov.w	ip, #5
 8000e1e:	fa0c f509 	lsl.w	r5, ip, r9
 8000e22:	432f      	orrs	r7, r5
 8000e24:	e786      	b.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000e26:	f04f 0c06 	mov.w	ip, #6
 8000e2a:	fa0c f509 	lsl.w	r5, ip, r9
 8000e2e:	432f      	orrs	r7, r5
 8000e30:	e780      	b.n	8000d34 <HAL_GPIO_Init+0xe4>
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40021400 	.word	0x40021400
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	40013c00 	.word	0x40013c00
 8000e54:	40021c00 	.word	0x40021c00

08000e58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e58:	b902      	cbnz	r2, 8000e5c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e5a:	0409      	lsls	r1, r1, #16
 8000e5c:	6181      	str	r1, [r0, #24]
  }
}
 8000e5e:	4770      	bx	lr

08000e60 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e60:	2800      	cmp	r0, #0
 8000e62:	f000 809f 	beq.w	8000fa4 <HAL_I2C_Init+0x144>
{
 8000e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 808f 	beq.w	8000f96 <HAL_I2C_Init+0x136>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e78:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f022 0201 	bic.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e98:	f001 fb2e 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e9c:	6861      	ldr	r1, [r4, #4]
 8000e9e:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <HAL_I2C_Init+0x16c>)
 8000ea0:	4299      	cmp	r1, r3
 8000ea2:	d84b      	bhi.n	8000f3c <HAL_I2C_Init+0xdc>
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	; (8000fd0 <HAL_I2C_Init+0x170>)
 8000ea6:	4298      	cmp	r0, r3
 8000ea8:	d97a      	bls.n	8000fa0 <HAL_I2C_Init+0x140>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eaa:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000eac:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eae:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000eb0:	fba3 6300 	umull	r6, r3, r3, r0
 8000eb4:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eb6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000eba:	431d      	orrs	r5, r3
 8000ebc:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ebe:	6a15      	ldr	r5, [r2, #32]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000ec6:	432b      	orrs	r3, r5
 8000ec8:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eca:	69d5      	ldr	r5, [r2, #28]
 8000ecc:	0049      	lsls	r1, r1, #1
 8000ece:	1e43      	subs	r3, r0, #1
 8000ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eda:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf38      	it	cc
 8000ee2:	2304      	movcc	r3, #4
 8000ee4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8000ee8:	432b      	orrs	r3, r5
 8000eea:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000eec:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8000ef0:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ef2:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ef4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8000ef8:	432b      	orrs	r3, r5
 8000efa:	4303      	orrs	r3, r0
 8000efc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000efe:	6890      	ldr	r0, [r2, #8]
 8000f00:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f02:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f04:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8000f08:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000f0c:	4329      	orrs	r1, r5
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f12:	68d1      	ldr	r1, [r2, #12]
 8000f14:	69a0      	ldr	r0, [r4, #24]
 8000f16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f20:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f22:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8000f24:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8000f28:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8000f2a:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8000f2c:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f2e:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f30:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f34:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8000f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_I2C_Init+0x178>)
 8000f3e:	4298      	cmp	r0, r3
 8000f40:	d92e      	bls.n	8000fa0 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f42:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f46:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f48:	4f24      	ldr	r7, [pc, #144]	; (8000fdc <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000f4a:	fba3 5300 	umull	r5, r3, r3, r0
 8000f4e:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f50:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8000f54:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f56:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f5a:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f5c:	fb03 f305 	mul.w	r3, r3, r5
 8000f60:	fba7 5303 	umull	r5, r3, r7, r3
 8000f64:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f66:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f68:	099b      	lsrs	r3, r3, #6
 8000f6a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000f6e:	3301      	adds	r3, #1
 8000f70:	432b      	orrs	r3, r5
 8000f72:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f74:	69d5      	ldr	r5, [r2, #28]
 8000f76:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8000f80:	b996      	cbnz	r6, 8000fa8 <HAL_I2C_Init+0x148>
 8000f82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000f86:	fbb0 f0f1 	udiv	r0, r0, r1
 8000f8a:	3001      	adds	r0, #1
 8000f8c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000f90:	b9c0      	cbnz	r0, 8000fc4 <HAL_I2C_Init+0x164>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e7a8      	b.n	8000ee8 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 8000f96:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000f9a:	f7ff fb79 	bl	8000690 <HAL_I2C_MspInit>
 8000f9e:	e76b      	b.n	8000e78 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8000fa0:	2001      	movs	r0, #1
}
 8000fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
}
 8000fa6:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fa8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000fac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000fb0:	fbb0 f0f1 	udiv	r0, r0, r1
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d0e9      	beq.n	8000f92 <HAL_I2C_Init+0x132>
 8000fbe:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8000fc2:	e791      	b.n	8000ee8 <HAL_I2C_Init+0x88>
 8000fc4:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8000fc8:	e78e      	b.n	8000ee8 <HAL_I2C_Init+0x88>
 8000fca:	bf00      	nop
 8000fcc:	000186a0 	.word	0x000186a0
 8000fd0:	001e847f 	.word	0x001e847f
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	003d08ff 	.word	0x003d08ff
 8000fdc:	10624dd3 	.word	0x10624dd3

08000fe0 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f000 8085 	beq.w	80010f0 <HAL_I2S_Init+0x110>
{
 8000fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000fe8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fec:	4604      	mov	r4, r0
 8000fee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d075      	beq.n	80010e2 <HAL_I2S_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000ff6:	2202      	movs	r2, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000ff8:	6821      	ldr	r1, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000ffa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000ffe:	69c8      	ldr	r0, [r1, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001000:	6963      	ldr	r3, [r4, #20]
 8001002:	68e5      	ldr	r5, [r4, #12]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001004:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8001008:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800100c:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800100e:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8001010:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001012:	d027      	beq.n	8001064 <HAL_I2S_Init+0x84>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001014:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001016:	2d00      	cmp	r5, #0
 8001018:	bf0c      	ite	eq
 800101a:	2510      	moveq	r5, #16
 800101c:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800101e:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001020:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001022:	bf98      	it	ls
 8001024:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001026:	f001 fb17 	bl	8002658 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800102a:	6922      	ldr	r2, [r4, #16]
 800102c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001030:	d060      	beq.n	80010f4 <HAL_I2S_Init+0x114>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001032:	fbb0 f0f5 	udiv	r0, r0, r5
 8001036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800103a:	0043      	lsls	r3, r0, #1
 800103c:	6960      	ldr	r0, [r4, #20]
 800103e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001042:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_I2S_Init+0x13c>)
 8001046:	fba1 1303 	umull	r1, r3, r1, r3
 800104a:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800104c:	0859      	lsrs	r1, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800104e:	1e88      	subs	r0, r1, #2
 8001050:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001052:	f003 0301 	and.w	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001056:	d95a      	bls.n	800110e <HAL_I2S_Init+0x12e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001058:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8001060:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001064:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001066:	69a7      	ldr	r7, [r4, #24]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001068:	f8d4 e020 	ldr.w	lr, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800106c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001130 <HAL_I2S_Init+0x150>
 8001070:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001074:	4313      	orrs	r3, r2
 8001076:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001078:	ea46 0300 	orr.w	r3, r6, r0
 800107c:	69ca      	ldr	r2, [r1, #28]
 800107e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001082:	433b      	orrs	r3, r7
 8001084:	432b      	orrs	r3, r5
 8001086:	ea02 020c 	and.w	r2, r2, ip
 800108a:	4313      	orrs	r3, r2
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800108c:	f1be 0f01 	cmp.w	lr, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001090:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001092:	d120      	bne.n	80010d6 <HAL_I2S_Init+0xf6>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_I2S_Init+0x140>)
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_I2S_Init+0x144>)
 8001098:	4291      	cmp	r1, r2
 800109a:	bf0c      	ite	eq
 800109c:	4619      	moveq	r1, r3
 800109e:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_I2S_Init+0x148>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80010a4:	69ca      	ldr	r2, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80010a6:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80010a8:	ea02 020c 	and.w	r2, r2, ip
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80010ac:	f04f 0c02 	mov.w	ip, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80010b0:	61ca      	str	r2, [r1, #28]
 80010b2:	ea40 0307 	orr.w	r3, r0, r7
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80010b6:	f8c1 c020 	str.w	ip, [r1, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80010ba:	69ca      	ldr	r2, [r1, #28]
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	432b      	orrs	r3, r5
 80010c2:	4313      	orrs	r3, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80010c4:	f436 7000 	bics.w	r0, r6, #512	; 0x200
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	bf14      	ite	ne
 80010cc:	2200      	movne	r2, #0
 80010ce:	f44f 7280 	moveq.w	r2, #256	; 0x100
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010d6:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80010d8:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010da:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80010dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80010e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_I2S_Init+0x14c>)
    hi2s->Lock = HAL_UNLOCKED;
 80010e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80010e8:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80010ea:	f7ff fb29 	bl	8000740 <HAL_I2S_MspInit>
 80010ee:	e782      	b.n	8000ff6 <HAL_I2S_Init+0x16>
    return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
}
 80010f2:	4770      	bx	lr
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80010f4:	68e3      	ldr	r3, [r4, #12]
 80010f6:	6961      	ldr	r1, [r4, #20]
 80010f8:	b173      	cbz	r3, 8001118 <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010fa:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010fc:	fbb0 f0f5 	udiv	r0, r0, r5
 8001100:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001104:	0043      	lsls	r3, r0, #1
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	3305      	adds	r3, #5
 800110c:	e79a      	b.n	8001044 <HAL_I2S_Init+0x64>
 800110e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001112:	68e5      	ldr	r5, [r4, #12]
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	e7a6      	b.n	8001066 <HAL_I2S_Init+0x86>
 8001118:	00ed      	lsls	r5, r5, #3
 800111a:	e7ef      	b.n	80010fc <HAL_I2S_Init+0x11c>
 800111c:	cccccccd 	.word	0xcccccccd
 8001120:	40003800 	.word	0x40003800
 8001124:	40003400 	.word	0x40003400
 8001128:	0800124d 	.word	0x0800124d
 800112c:	08001141 	.word	0x08001141
 8001130:	fffff040 	.word	0xfffff040

08001134 <HAL_I2S_TxCpltCallback>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <HAL_I2S_RxCpltCallback>:
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <HAL_I2S_ErrorCallback>:
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001140:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001142:	6803      	ldr	r3, [r0, #0]
{
 8001144:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800114a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800114e:	2a04      	cmp	r2, #4
{
 8001150:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001152:	d034      	beq.n	80011be <I2S_IRQHandler+0x7e>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001154:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001158:	2b03      	cmp	r3, #3
 800115a:	d001      	beq.n	8001160 <I2S_IRQHandler+0x20>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800115c:	b004      	add	sp, #16
 800115e:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001160:	9b01      	ldr	r3, [sp, #4]
 8001162:	079b      	lsls	r3, r3, #30
 8001164:	d510      	bpl.n	8001188 <I2S_IRQHandler+0x48>
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	0610      	lsls	r0, r2, #24
 800116c:	d50c      	bpl.n	8001188 <I2S_IRQHandler+0x48>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800116e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001170:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001174:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001176:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8001178:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800117a:	3a01      	subs	r2, #1
 800117c:	b292      	uxth	r2, r2
 800117e:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001180:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001182:	b292      	uxth	r2, r2
 8001184:	2a00      	cmp	r2, #0
 8001186:	d049      	beq.n	800121c <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001188:	9b01      	ldr	r3, [sp, #4]
 800118a:	0719      	lsls	r1, r3, #28
 800118c:	d5e6      	bpl.n	800115c <I2S_IRQHandler+0x1c>
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	0692      	lsls	r2, r2, #26
 8001194:	d5e2      	bpl.n	800115c <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001196:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001198:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800119a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800119e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80011a0:	9103      	str	r1, [sp, #12]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80011a6:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80011a8:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80011aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80011ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ffc0 	bl	800113c <HAL_I2S_ErrorCallback>
}
 80011bc:	e7ce      	b.n	800115c <I2S_IRQHandler+0x1c>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80011be:	9a01      	ldr	r2, [sp, #4]
 80011c0:	07d1      	lsls	r1, r2, #31
 80011c2:	d50e      	bpl.n	80011e2 <I2S_IRQHandler+0xa2>
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	0652      	lsls	r2, r2, #25
 80011c8:	d50b      	bpl.n	80011e2 <I2S_IRQHandler+0xa2>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80011ca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 80011d2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 80011d4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80011d6:	3a01      	subs	r2, #1
 80011d8:	b292      	uxth	r2, r2
 80011da:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80011dc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80011de:	b292      	uxth	r2, r2
 80011e0:	b33a      	cbz	r2, 8001232 <I2S_IRQHandler+0xf2>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80011e2:	9b01      	ldr	r3, [sp, #4]
 80011e4:	0659      	lsls	r1, r3, #25
 80011e6:	d5b5      	bpl.n	8001154 <I2S_IRQHandler+0x14>
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	0692      	lsls	r2, r2, #26
 80011ee:	d5b1      	bpl.n	8001154 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011f0:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80011f2:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011f8:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80011fa:	9102      	str	r1, [sp, #8]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	9202      	str	r2, [sp, #8]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001204:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001206:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001208:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800120c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff ff91 	bl	800113c <HAL_I2S_ErrorCallback>
 800121a:	e79b      	b.n	8001154 <I2S_IRQHandler+0x14>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800121c:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800121e:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001224:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8001226:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8001228:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800122c:	f7ff ff82 	bl	8001134 <HAL_I2S_TxCpltCallback>
 8001230:	e7aa      	b.n	8001188 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001232:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001234:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001236:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800123a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800123c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001240:	f7ff ff7a 	bl	8001138 <HAL_I2S_RxCpltCallback>
 8001244:	e7cd      	b.n	80011e2 <I2S_IRQHandler+0xa2>
 8001246:	bf00      	nop

08001248 <HAL_I2SEx_TxRxCpltCallback>:
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800124c:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800124e:	4a93      	ldr	r2, [pc, #588]	; (800149c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001250:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001252:	4b93      	ldr	r3, [pc, #588]	; (80014a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001254:	68a9      	ldr	r1, [r5, #8]
{
 8001256:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001258:	4295      	cmp	r5, r2
 800125a:	bf18      	it	ne
 800125c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001260:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001266:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001268:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800126a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800126c:	6859      	ldr	r1, [r3, #4]
 800126e:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001270:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8001274:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001276:	d075      	beq.n	8001364 <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001278:	9a01      	ldr	r2, [sp, #4]
 800127a:	0791      	lsls	r1, r2, #30
 800127c:	d51a      	bpl.n	80012b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 800127e:	9a03      	ldr	r2, [sp, #12]
 8001280:	0612      	lsls	r2, r2, #24
 8001282:	d517      	bpl.n	80012b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001284:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001286:	1c91      	adds	r1, r2, #2
 8001288:	8812      	ldrh	r2, [r2, #0]
 800128a:	6241      	str	r1, [r0, #36]	; 0x24
 800128c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800128e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001290:	3a01      	subs	r2, #1
 8001292:	b292      	uxth	r2, r2
 8001294:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001296:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001298:	b292      	uxth	r2, r2
 800129a:	b95a      	cbnz	r2, 80012b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80012a2:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80012a4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b923      	cbnz	r3, 80012b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80012b0:	f7ff ffca 	bl	8001248 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80012b4:	9b00      	ldr	r3, [sp, #0]
 80012b6:	07db      	lsls	r3, r3, #31
 80012b8:	d51c      	bpl.n	80012f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 80012ba:	9b02      	ldr	r3, [sp, #8]
 80012bc:	065d      	lsls	r5, r3, #25
 80012be:	d519      	bpl.n	80012f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80012c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012c2:	6822      	ldr	r2, [r4, #0]
 80012c4:	1c98      	adds	r0, r3, #2
 80012c6:	68d1      	ldr	r1, [r2, #12]
 80012c8:	62e0      	str	r0, [r4, #44]	; 0x2c
 80012ca:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80012cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80012d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b963      	cbnz	r3, 80012f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80012da:	6853      	ldr	r3, [r2, #4]
 80012dc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80012e0:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80012e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b92b      	cbnz	r3, 80012f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff ffaa 	bl	8001248 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80012f4:	9b00      	ldr	r3, [sp, #0]
 80012f6:	0658      	lsls	r0, r3, #25
 80012f8:	d51b      	bpl.n	8001332 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 80012fa:	9b02      	ldr	r3, [sp, #8]
 80012fc:	0699      	lsls	r1, r3, #26
 80012fe:	d518      	bpl.n	8001332 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001300:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001302:	4866      	ldr	r0, [pc, #408]	; (800149c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001304:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001306:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001308:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800130c:	4282      	cmp	r2, r0
 800130e:	bf18      	it	ne
 8001310:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001314:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001316:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001318:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800131a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800131e:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001320:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001324:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800132c:	4620      	mov	r0, r4
 800132e:	f7ff ff05 	bl	800113c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	071a      	lsls	r2, r3, #28
 8001336:	d56e      	bpl.n	8001416 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001338:	9b03      	ldr	r3, [sp, #12]
 800133a:	069b      	lsls	r3, r3, #26
 800133c:	d56b      	bpl.n	8001416 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	4956      	ldr	r1, [pc, #344]	; (800149c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001342:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001344:	428a      	cmp	r2, r1
 8001346:	bf18      	it	ne
 8001348:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 800134c:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001354:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001356:	6853      	ldr	r3, [r2, #4]
 8001358:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800135c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800135e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8001362:	e04e      	b.n	8001402 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001364:	9b00      	ldr	r3, [sp, #0]
 8001366:	079a      	lsls	r2, r3, #30
 8001368:	d502      	bpl.n	8001370 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 800136a:	9b02      	ldr	r3, [sp, #8]
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	d477      	bmi.n	8001460 <HAL_I2SEx_FullDuplex_IRQHandler+0x214>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	07d8      	lsls	r0, r3, #31
 8001374:	d502      	bpl.n	800137c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001376:	9b03      	ldr	r3, [sp, #12]
 8001378:	0659      	lsls	r1, r3, #25
 800137a:	d44e      	bmi.n	800141a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800137c:	9b01      	ldr	r3, [sp, #4]
 800137e:	065a      	lsls	r2, r3, #25
 8001380:	d522      	bpl.n	80013c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8001382:	9b03      	ldr	r3, [sp, #12]
 8001384:	069b      	lsls	r3, r3, #26
 8001386:	d51f      	bpl.n	80013c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	4944      	ldr	r1, [pc, #272]	; (800149c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800138c:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800138e:	428b      	cmp	r3, r1
 8001390:	bf18      	it	ne
 8001392:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001396:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001398:	6851      	ldr	r1, [r2, #4]
 800139a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800139e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013a6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013a8:	9004      	str	r0, [sp, #16]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	9204      	str	r2, [sp, #16]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80013b2:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013b4:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80013b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80013ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff feba 	bl	800113c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80013c8:	9b00      	ldr	r3, [sp, #0]
 80013ca:	071d      	lsls	r5, r3, #28
 80013cc:	d523      	bpl.n	8001416 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80013ce:	9b02      	ldr	r3, [sp, #8]
 80013d0:	0698      	lsls	r0, r3, #26
 80013d2:	d520      	bpl.n	8001416 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013d4:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013d6:	4831      	ldr	r0, [pc, #196]	; (800149c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013d8:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013da:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013dc:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013e0:	4283      	cmp	r3, r0
 80013e2:	bf18      	it	ne
 80013e4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013e8:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013ea:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013ec:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013ee:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80013f2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013f4:	9005      	str	r0, [sp, #20]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80013fa:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013fc:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80013fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001402:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001404:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800140c:	b007      	add	sp, #28
 800140e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8001412:	f7ff be93 	b.w	800113c <HAL_I2S_ErrorCallback>
}
 8001416:	b007      	add	sp, #28
 8001418:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800141a:	6820      	ldr	r0, [r4, #0]
 800141c:	491f      	ldr	r1, [pc, #124]	; (800149c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800141e:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001420:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001422:	4288      	cmp	r0, r1
 8001424:	bf18      	it	ne
 8001426:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800142a:	1c98      	adds	r0, r3, #2
 800142c:	68d1      	ldr	r1, [r2, #12]
 800142e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001430:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001432:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001434:	3b01      	subs	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800143a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d19c      	bne.n	800137c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001442:	6853      	ldr	r3, [r2, #4]
 8001444:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001448:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 800144a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d194      	bne.n	800137c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001452:	2301      	movs	r3, #1
 8001454:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fef5 	bl	8001248 <HAL_I2SEx_TxRxCpltCallback>
 800145e:	e78d      	b.n	800137c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001460:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001462:	1c9a      	adds	r2, r3, #2
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	6242      	str	r2, [r0, #36]	; 0x24
 8001468:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 800146a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800146c:	3b01      	subs	r3, #1
 800146e:	b29b      	uxth	r3, r3
 8001470:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001472:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	f47f af7a 	bne.w	8001370 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800147c:	686b      	ldr	r3, [r5, #4]
 800147e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001482:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 8001484:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001486:	b29b      	uxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f af71 	bne.w	8001370 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 800148e:	2301      	movs	r3, #1
 8001490:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001494:	f7ff fed8 	bl	8001248 <HAL_I2SEx_TxRxCpltCallback>
 8001498:	e76a      	b.n	8001370 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 800149a:	bf00      	nop
 800149c:	40003800 	.word	0x40003800
 80014a0:	40003400 	.word	0x40003400

080014a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014a8:	2800      	cmp	r0, #0
 80014aa:	f000 8083 	beq.w	80015b4 <HAL_PCD_Init+0x110>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ae:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80014b2:	6805      	ldr	r5, [r0, #0]
 80014b4:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ba:	b333      	cbz	r3, 800150a <HAL_PCD_Init+0x66>
 80014bc:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014be:	2303      	movs	r3, #3
 80014c0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c4:	6beb      	ldr	r3, [r5, #60]	; 0x3c

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c6:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80014cc:	bf08      	it	eq
 80014ce:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80014d0:	f001 fa14 	bl	80028fc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d4:	f855 cb10 	ldr.w	ip, [r5], #16
 80014d8:	462f      	mov	r7, r5
 80014da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014dc:	466e      	mov	r6, sp
 80014de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80014e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80014e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80014ec:	1d26      	adds	r6, r4, #4
 80014ee:	4660      	mov	r0, ip
 80014f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80014f4:	f001 f93a 	bl	800276c <USB_CoreInit>
 80014f8:	4607      	mov	r7, r0
 80014fa:	b160      	cbz	r0, 8001516 <HAL_PCD_Init+0x72>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001502:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001504:	4628      	mov	r0, r5
 8001506:	b00b      	add	sp, #44	; 0x2c
 8001508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800150a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800150e:	f002 fbeb 	bl	8003ce8 <HAL_PCD_MspInit>
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	e7d3      	b.n	80014be <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001516:	4601      	mov	r1, r0
 8001518:	6820      	ldr	r0, [r4, #0]
 800151a:	f001 f9f7 	bl	800290c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	6860      	ldr	r0, [r4, #4]
 8001520:	b360      	cbz	r0, 800157c <HAL_PCD_Init+0xd8>
 8001522:	4639      	mov	r1, r7
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001524:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8001526:	f04f 0c01 	mov.w	ip, #1
 800152a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800152e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001532:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 8001534:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001538:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	b2f9      	uxtb	r1, r7
 800153e:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 8001540:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001548:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_len = 0U;
 800154c:	651a      	str	r2, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154e:	d3ec      	bcc.n	800152a <HAL_PCD_Init+0x86>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001552:	4611      	mov	r1, r2
 8001554:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 800155e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	b2fa      	uxtb	r2, r7
 8001564:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 8001566:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156a:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800156e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001572:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001576:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157a:	d3eb      	bcc.n	8001554 <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	466f      	mov	r7, sp
 8001580:	f8d4 c000 	ldr.w	ip, [r4]
 8001584:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001588:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800158a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800158e:	e887 0003 	stmia.w	r7, {r0, r1}
 8001592:	4660      	mov	r0, ip
 8001594:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001598:	f001 f9d0 	bl	800293c <USB_DevInit>
 800159c:	4605      	mov	r5, r0
 800159e:	2800      	cmp	r0, #0
 80015a0:	d1ac      	bne.n	80014fc <HAL_PCD_Init+0x58>
  hpcd->State = HAL_PCD_STATE_READY;
 80015a2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80015a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  (void)USB_DevDisconnect(hpcd->Instance);
 80015a8:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80015aa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80015ae:	f001 fd63 	bl	8003078 <USB_DevDisconnect>
  return HAL_OK;
 80015b2:	e7a7      	b.n	8001504 <HAL_PCD_Init+0x60>
    return HAL_ERROR;
 80015b4:	2501      	movs	r5, #1
}
 80015b6:	4628      	mov	r0, r5
 80015b8:	b00b      	add	sp, #44	; 0x2c
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015bc <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80015bc:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d01a      	beq.n	80015fa <HAL_PCD_Start+0x3e>
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015c6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 80015c8:	2101      	movs	r1, #1
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015ca:	428a      	cmp	r2, r1
{
 80015cc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80015ce:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015d2:	d00a      	beq.n	80015ea <HAL_PCD_Start+0x2e>
 80015d4:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fd42 	bl	8003060 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80015dc:	6820      	ldr	r0, [r4, #0]
 80015de:	f001 f985 	bl	80028ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80015e8:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015ea:	6982      	ldr	r2, [r0, #24]
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d0f1      	beq.n	80015d4 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
 80015f8:	e7ec      	b.n	80015d4 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 80015fa:	2002      	movs	r0, #2
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001604:	6806      	ldr	r6, [r0, #0]
{
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800160a:	4630      	mov	r0, r6
 800160c:	f001 fd72 	bl	80030f4 <USB_GetMode>
 8001610:	b110      	cbz	r0, 8001618 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8001612:	b009      	add	sp, #36	; 0x24
 8001614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001618:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800161a:	6820      	ldr	r0, [r4, #0]
 800161c:	f001 fd38 	bl	8003090 <USB_ReadInterrupts>
 8001620:	2800      	cmp	r0, #0
 8001622:	d0f6      	beq.n	8001612 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001624:	6820      	ldr	r0, [r4, #0]
 8001626:	f001 fd33 	bl	8003090 <USB_ReadInterrupts>
 800162a:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800162e:	6820      	ldr	r0, [r4, #0]
 8001630:	bf1e      	ittt	ne
 8001632:	6943      	ldrne	r3, [r0, #20]
 8001634:	f003 0302 	andne.w	r3, r3, #2
 8001638:	6143      	strne	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800163a:	f001 fd29 	bl	8003090 <USB_ReadInterrupts>
 800163e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001642:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001644:	f040 81c3 	bne.w	80019ce <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001648:	f001 fd22 	bl	8003090 <USB_ReadInterrupts>
 800164c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001650:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001652:	f040 811c 	bne.w	800188e <HAL_PCD_IRQHandler+0x28e>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001656:	f001 fd1b 	bl	8003090 <USB_ReadInterrupts>
 800165a:	2800      	cmp	r0, #0
 800165c:	db7d      	blt.n	800175a <HAL_PCD_IRQHandler+0x15a>
 800165e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001660:	f001 fd16 	bl	8003090 <USB_ReadInterrupts>
 8001664:	0501      	lsls	r1, r0, #20
 8001666:	d449      	bmi.n	80016fc <HAL_PCD_IRQHandler+0xfc>
 8001668:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800166a:	f001 fd11 	bl	8003090 <USB_ReadInterrupts>
 800166e:	04c3      	lsls	r3, r0, #19
 8001670:	f100 8087 	bmi.w	8001782 <HAL_PCD_IRQHandler+0x182>
 8001674:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001676:	f001 fd0b 	bl	8003090 <USB_ReadInterrupts>
 800167a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800167e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001680:	f040 80c8 	bne.w	8001814 <HAL_PCD_IRQHandler+0x214>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001684:	f001 fd04 	bl	8003090 <USB_ReadInterrupts>
 8001688:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800168e:	d011      	beq.n	80016b4 <HAL_PCD_IRQHandler+0xb4>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001690:	6983      	ldr	r3, [r0, #24]
 8001692:	f023 0310 	bic.w	r3, r3, #16
 8001696:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8001698:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800169a:	f3c5 4343 	ubfx	r3, r5, #17, #4
 800169e:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016a0:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016a4:	d039      	beq.n	800171a <HAL_PCD_IRQHandler+0x11a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	f000 829d 	beq.w	8001be6 <HAL_PCD_IRQHandler+0x5e6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ac:	6983      	ldr	r3, [r0, #24]
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016b4:	f001 fcec 	bl	8003090 <USB_ReadInterrupts>
 80016b8:	0707      	lsls	r7, r0, #28
 80016ba:	f100 80df 	bmi.w	800187c <HAL_PCD_IRQHandler+0x27c>
 80016be:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016c0:	f001 fce6 	bl	8003090 <USB_ReadInterrupts>
 80016c4:	02c6      	lsls	r6, r0, #11
 80016c6:	f100 80cf 	bmi.w	8001868 <HAL_PCD_IRQHandler+0x268>
 80016ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016cc:	f001 fce0 	bl	8003090 <USB_ReadInterrupts>
 80016d0:	0285      	lsls	r5, r0, #10
 80016d2:	f100 80bf 	bmi.w	8001854 <HAL_PCD_IRQHandler+0x254>
 80016d6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80016d8:	f001 fcda 	bl	8003090 <USB_ReadInterrupts>
 80016dc:	0040      	lsls	r0, r0, #1
 80016de:	f100 80b0 	bmi.w	8001842 <HAL_PCD_IRQHandler+0x242>
 80016e2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80016e4:	f001 fcd4 	bl	8003090 <USB_ReadInterrupts>
 80016e8:	0741      	lsls	r1, r0, #29
 80016ea:	d592      	bpl.n	8001612 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80016f0:	076a      	lsls	r2, r5, #29
 80016f2:	d40d      	bmi.n	8001710 <HAL_PCD_IRQHandler+0x110>
      hpcd->Instance->GOTGINT |= temp;
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	432a      	orrs	r2, r5
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	e78a      	b.n	8001612 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016fc:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8001700:	07da      	lsls	r2, r3, #31
 8001702:	d426      	bmi.n	8001752 <HAL_PCD_IRQHandler+0x152>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	6943      	ldr	r3, [r0, #20]
 8001708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170c:	6143      	str	r3, [r0, #20]
 800170e:	e7ac      	b.n	800166a <HAL_PCD_IRQHandler+0x6a>
        HAL_PCD_DisconnectCallback(hpcd);
 8001710:	4620      	mov	r0, r4
 8001712:	f002 fb8f 	bl	8003e34 <HAL_PCD_DisconnectCallback>
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	e7ec      	b.n	80016f4 <HAL_PCD_IRQHandler+0xf4>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800171a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800171e:	421d      	tst	r5, r3
 8001720:	d0c4      	beq.n	80016ac <HAL_PCD_IRQHandler+0xac>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001722:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8001726:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800172a:	f3c5 150a 	ubfx	r5, r5, #4, #11
 800172e:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8001732:	462a      	mov	r2, r5
 8001734:	4630      	mov	r0, r6
 8001736:	f001 fc19 	bl	8002f6c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173a:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001742:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001744:	4429      	add	r1, r5
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001746:	442a      	add	r2, r5
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001748:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800174c:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8001750:	e7ac      	b.n	80016ac <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 8001752:	4620      	mov	r0, r4
 8001754:	f002 fb46 	bl	8003de4 <HAL_PCD_SuspendCallback>
 8001758:	e7d4      	b.n	8001704 <HAL_PCD_IRQHandler+0x104>
      if (hpcd->LPM_State == LPM_L1)
 800175a:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800175e:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001762:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800176c:	f000 81f6 	beq.w	8001b5c <HAL_PCD_IRQHandler+0x55c>
        HAL_PCD_ResumeCallback(hpcd);
 8001770:	4620      	mov	r0, r4
 8001772:	f002 fb4f 	bl	8003e14 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001776:	6820      	ldr	r0, [r4, #0]
 8001778:	6943      	ldr	r3, [r0, #20]
 800177a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800177e:	6143      	str	r3, [r0, #20]
 8001780:	e76e      	b.n	8001660 <HAL_PCD_IRQHandler+0x60>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001782:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8001786:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001788:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800178a:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800178e:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001790:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001792:	f001 f9bd 	bl	8002b10 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001796:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800179a:	f1bc 0f00 	cmp.w	ip, #0
 800179e:	d015      	beq.n	80017cc <HAL_PCD_IRQHandler+0x1cc>
 80017a0:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017a4:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80017a8:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80017b0:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017b2:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	3501      	adds	r5, #1
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c0:	4565      	cmp	r5, ip
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80017c6:	f103 0320 	add.w	r3, r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ca:	d1ed      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x1a8>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017cc:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d4:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	f000 81b5 	beq.w	8001b46 <HAL_PCD_IRQHandler+0x546>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017e0:	f043 030b 	orr.w	r3, r3, #11
 80017e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ea:	f043 030b 	orr.w	r3, r3, #11
 80017ee:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f0:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017f4:	7c21      	ldrb	r1, [r4, #16]
 80017f6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017fc:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001800:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001804:	f001 fc96 	bl	8003134 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001808:	6820      	ldr	r0, [r4, #0]
 800180a:	6943      	ldr	r3, [r0, #20]
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	6143      	str	r3, [r0, #20]
 8001812:	e730      	b.n	8001676 <HAL_PCD_IRQHandler+0x76>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001814:	f001 fc72 	bl	80030fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	f001 f98b 	bl	8002b34 <USB_GetDevSpeed>
 800181e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001820:	6825      	ldr	r5, [r4, #0]
 8001822:	f000 fe63 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8001826:	7b22      	ldrb	r2, [r4, #12]
 8001828:	4601      	mov	r1, r0
 800182a:	4628      	mov	r0, r5
 800182c:	f000 ffe2 	bl	80027f4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001830:	4620      	mov	r0, r4
 8001832:	f002 fac1 	bl	8003db8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	6943      	ldr	r3, [r0, #20]
 800183a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183e:	6143      	str	r3, [r0, #20]
 8001840:	e720      	b.n	8001684 <HAL_PCD_IRQHandler+0x84>
      HAL_PCD_ConnectCallback(hpcd);
 8001842:	4620      	mov	r0, r4
 8001844:	f002 faf2 	bl	8003e2c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001848:	6820      	ldr	r0, [r4, #0]
 800184a:	6943      	ldr	r3, [r0, #20]
 800184c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001850:	6143      	str	r3, [r0, #20]
 8001852:	e747      	b.n	80016e4 <HAL_PCD_IRQHandler+0xe4>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001854:	4620      	mov	r0, r4
 8001856:	2100      	movs	r1, #0
 8001858:	f002 fae0 	bl	8003e1c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	6943      	ldr	r3, [r0, #20]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	6143      	str	r3, [r0, #20]
 8001866:	e737      	b.n	80016d8 <HAL_PCD_IRQHandler+0xd8>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001868:	4620      	mov	r0, r4
 800186a:	2100      	movs	r1, #0
 800186c:	f002 fada 	bl	8003e24 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001870:	6820      	ldr	r0, [r4, #0]
 8001872:	6943      	ldr	r3, [r0, #20]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	6143      	str	r3, [r0, #20]
 800187a:	e727      	b.n	80016cc <HAL_PCD_IRQHandler+0xcc>
      HAL_PCD_SOFCallback(hpcd);
 800187c:	4620      	mov	r0, r4
 800187e:	f002 fa97 	bl	8003db0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001882:	6820      	ldr	r0, [r4, #0]
 8001884:	6943      	ldr	r3, [r0, #20]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	6143      	str	r3, [r0, #20]
 800188c:	e718      	b.n	80016c0 <HAL_PCD_IRQHandler+0xc0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800188e:	f001 fc0b 	bl	80030a8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8001892:	4681      	mov	r9, r0
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f1b9 0f00 	cmp.w	r9, #0
 800189a:	f43f aedc 	beq.w	8001656 <HAL_PCD_IRQHandler+0x56>
 800189e:	f506 6310 	add.w	r3, r6, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80018a6:	46a3      	mov	fp, r4
      epnum = 0U;
 80018a8:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018ac:	461e      	mov	r6, r3
 80018ae:	e007      	b.n	80018c0 <HAL_PCD_IRQHandler+0x2c0>
      while (ep_intr != 0U)
 80018b0:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80018b4:	f10a 0a01 	add.w	sl, sl, #1
 80018b8:	f10b 0b1c 	add.w	fp, fp, #28
      while (ep_intr != 0U)
 80018bc:	f000 80f9 	beq.w	8001ab2 <HAL_PCD_IRQHandler+0x4b2>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018c0:	f019 0f01 	tst.w	r9, #1
 80018c4:	d0f4      	beq.n	80018b0 <HAL_PCD_IRQHandler+0x2b0>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018c6:	fa5f f78a 	uxtb.w	r7, sl
 80018ca:	4639      	mov	r1, r7
 80018cc:	f001 fbfe 	bl	80030cc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018d0:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018d2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018d4:	f100 80b8 	bmi.w	8001a48 <HAL_PCD_IRQHandler+0x448>
 80018d8:	6820      	ldr	r0, [r4, #0]
 80018da:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018dc:	072b      	lsls	r3, r5, #28
 80018de:	d503      	bpl.n	80018e8 <HAL_PCD_IRQHandler+0x2e8>
 80018e0:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018e4:	2208      	movs	r2, #8
 80018e6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018e8:	06e9      	lsls	r1, r5, #27
 80018ea:	d503      	bpl.n	80018f4 <HAL_PCD_IRQHandler+0x2f4>
 80018ec:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018f0:	2210      	movs	r2, #16
 80018f2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018f4:	066a      	lsls	r2, r5, #25
 80018f6:	d503      	bpl.n	8001900 <HAL_PCD_IRQHandler+0x300>
 80018f8:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001900:	07ab      	lsls	r3, r5, #30
 8001902:	d503      	bpl.n	800190c <HAL_PCD_IRQHandler+0x30c>
 8001904:	eb06 134a 	add.w	r3, r6, sl, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001908:	2202      	movs	r2, #2
 800190a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800190c:	062d      	lsls	r5, r5, #24
 800190e:	d5cf      	bpl.n	80018b0 <HAL_PCD_IRQHandler+0x2b0>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001910:	e9db 1314 	ldrd	r1, r3, [fp, #80]	; 0x50
 8001914:	428b      	cmp	r3, r1
 8001916:	d8cb      	bhi.n	80018b0 <HAL_PCD_IRQHandler+0x2b0>
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001918:	eb08 124a 	add.w	r2, r8, sl, lsl #5
 800191c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001920:	4610      	mov	r0, r2
  if (len > ep->maxpacket)
 8001922:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001926:	9005      	str	r0, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8001928:	1acd      	subs	r5, r1, r3
  len32b = (len + 3U) / 4U;
 800192a:	4295      	cmp	r5, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800192c:	6980      	ldr	r0, [r0, #24]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800192e:	f8cd 8018 	str.w	r8, [sp, #24]
  len32b = (len + 3U) / 4U;
 8001932:	46ac      	mov	ip, r5
 8001934:	bf28      	it	cs
 8001936:	4694      	movcs	ip, r2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001938:	b280      	uxth	r0, r0
  len32b = (len + 3U) / 4U;
 800193a:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800193e:	ebb0 0f9c 	cmp.w	r0, ip, lsr #2
 8001942:	d332      	bcc.n	80019aa <HAL_PCD_IRQHandler+0x3aa>
 8001944:	428b      	cmp	r3, r1
 8001946:	d234      	bcs.n	80019b2 <HAL_PCD_IRQHandler+0x3b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001948:	b399      	cbz	r1, 80019b2 <HAL_PCD_IRQHandler+0x3b2>
 800194a:	f8cd 901c 	str.w	r9, [sp, #28]
 800194e:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
 8001952:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001956:	e007      	b.n	8001968 <HAL_PCD_IRQHandler+0x368>
 8001958:	f8db 5050 	ldr.w	r5, [fp, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800195c:	429d      	cmp	r5, r3
 800195e:	f240 8190 	bls.w	8001c82 <HAL_PCD_IRQHandler+0x682>
 8001962:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8001966:	1aed      	subs	r5, r5, r3
 8001968:	4295      	cmp	r5, r2
 800196a:	bf28      	it	cs
 800196c:	4615      	movcs	r5, r2
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800196e:	7c23      	ldrb	r3, [r4, #16]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	463a      	mov	r2, r7
 8001974:	b2ab      	uxth	r3, r5
 8001976:	4640      	mov	r0, r8
 8001978:	f001 fae2 	bl	8002f40 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800197c:	f8d9 2018 	ldr.w	r2, [r9, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001980:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 8001984:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
    ep->xfer_buff  += len;
 8001988:	4429      	add	r1, r5
    ep->xfer_count += len;
 800198a:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800198c:	b292      	uxth	r2, r2
    len32b = (len + 3U) / 4U;
 800198e:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001990:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
    ep->xfer_buff  += len;
 8001994:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
    ep->xfer_count += len;
 8001998:	f8cb 3054 	str.w	r3, [fp, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800199c:	d2dc      	bcs.n	8001958 <HAL_PCD_IRQHandler+0x358>
 800199e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80019a2:	f8d4 8000 	ldr.w	r8, [r4]
 80019a6:	f8db 1050 	ldr.w	r1, [fp, #80]	; 0x50
  }

  if (ep->xfer_len <= ep->xfer_count)
 80019aa:	4299      	cmp	r1, r3
 80019ac:	4640      	mov	r0, r8
 80019ae:	f63f af7f 	bhi.w	80018b0 <HAL_PCD_IRQHandler+0x2b0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019b2:	9b06      	ldr	r3, [sp, #24]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b4:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019b6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019ba:	f00a 010f 	and.w	r1, sl, #15
 80019be:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019c2:	ea22 0201 	bic.w	r2, r2, r1
 80019c6:	4640      	mov	r0, r8
 80019c8:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80019cc:	e770      	b.n	80018b0 <HAL_PCD_IRQHandler+0x2b0>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80019ce:	f001 fb63 	bl	8003098 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80019d2:	4607      	mov	r7, r0
 80019d4:	6820      	ldr	r0, [r4, #0]
 80019d6:	2f00      	cmp	r7, #0
 80019d8:	f43f ae36 	beq.w	8001648 <HAL_PCD_IRQHandler+0x48>
      epnum = 0U;
 80019dc:	f04f 0800 	mov.w	r8, #0
 80019e0:	f506 6b30 	add.w	fp, r6, #2816	; 0xb00
 80019e4:	e9cd 6503 	strd	r6, r5, [sp, #12]
 80019e8:	e003      	b.n	80019f2 <HAL_PCD_IRQHandler+0x3f2>
      while (ep_intr != 0U)
 80019ea:	087f      	lsrs	r7, r7, #1
        epnum++;
 80019ec:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80019f0:	d062      	beq.n	8001ab8 <HAL_PCD_IRQHandler+0x4b8>
        if ((ep_intr & 0x1U) != 0U)
 80019f2:	07fd      	lsls	r5, r7, #31
 80019f4:	d5f9      	bpl.n	80019ea <HAL_PCD_IRQHandler+0x3ea>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019f6:	fa5f f688 	uxtb.w	r6, r8
 80019fa:	4631      	mov	r1, r6
 80019fc:	f001 fb5c 	bl	80030b8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a00:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a04:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a06:	d15a      	bne.n	8001abe <HAL_PCD_IRQHandler+0x4be>
 8001a08:	f000 0308 	and.w	r3, r0, #8
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d17d      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x50c>
 8001a10:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a12:	f019 0f10 	tst.w	r9, #16
 8001a16:	d003      	beq.n	8001a20 <HAL_PCD_IRQHandler+0x420>
 8001a18:	eb0b 1348 	add.w	r3, fp, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a20:	f019 0f20 	tst.w	r9, #32
 8001a24:	d007      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x436>
            if (hpcd->Init.dma_enable == 1U)
 8001a26:	6921      	ldr	r1, [r4, #16]
 8001a28:	2901      	cmp	r1, #1
 8001a2a:	f000 80ef 	beq.w	8001c0c <HAL_PCD_IRQHandler+0x60c>
 8001a2e:	eb0b 1348 	add.w	r3, fp, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a32:	2220      	movs	r2, #32
 8001a34:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a36:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8001a3a:	d0d6      	beq.n	80019ea <HAL_PCD_IRQHandler+0x3ea>
 8001a3c:	eb0b 1348 	add.w	r3, fp, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	e7d0      	b.n	80019ea <HAL_PCD_IRQHandler+0x3ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a48:	9b03      	ldr	r3, [sp, #12]
            if (hpcd->Init.dma_enable == 1U)
 8001a4a:	6920      	ldr	r0, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a4c:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a50:	f04f 0c01 	mov.w	ip, #1
 8001a54:	f00a 020f 	and.w	r2, sl, #15
 8001a58:	fa0c f202 	lsl.w	r2, ip, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a5c:	ea21 0102 	bic.w	r1, r1, r2
 8001a60:	eb06 124a 	add.w	r2, r6, sl, lsl #5
 8001a64:	f8c3 1834 	str.w	r1, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a68:	4613      	mov	r3, r2
            if (hpcd->Init.dma_enable == 1U)
 8001a6a:	4560      	cmp	r0, ip
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a6c:	f8c3 c008 	str.w	ip, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8001a70:	d104      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x47c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a72:	e9db 2311 	ldrd	r2, r3, [fp, #68]	; 0x44
 8001a76:	4413      	add	r3, r2
 8001a78:	f8cb 3048 	str.w	r3, [fp, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f002 f98c 	bl	8003d9c <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8001a84:	6921      	ldr	r1, [r4, #16]
 8001a86:	f8d4 8000 	ldr.w	r8, [r4]
 8001a8a:	2901      	cmp	r1, #1
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	f47f af25 	bne.w	80018dc <HAL_PCD_IRQHandler+0x2dc>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a92:	f1ba 0f00 	cmp.w	sl, #0
 8001a96:	f47f af21 	bne.w	80018dc <HAL_PCD_IRQHandler+0x2dc>
 8001a9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f af1d 	bne.w	80018dc <HAL_PCD_IRQHandler+0x2dc>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001aa2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001aa6:	f001 fb45 	bl	8003134 <USB_EP0_OutStart>
 8001aaa:	f8d4 8000 	ldr.w	r8, [r4]
 8001aae:	4640      	mov	r0, r8
 8001ab0:	e714      	b.n	80018dc <HAL_PCD_IRQHandler+0x2dc>
 8001ab2:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8001ab6:	e5ce      	b.n	8001656 <HAL_PCD_IRQHandler+0x56>
 8001ab8:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8001abc:	e5c4      	b.n	8001648 <HAL_PCD_IRQHandler+0x48>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001abe:	6820      	ldr	r0, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001ac0:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001ac4:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8001ac8:	eb0b 0503 	add.w	r5, fp, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001acc:	f500 6a30 	add.w	sl, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ad0:	2101      	movs	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ad2:	449a      	add	sl, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ad4:	60a9      	str	r1, [r5, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001ad6:	458c      	cmp	ip, r1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ad8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ada:	f8da e008 	ldr.w	lr, [sl, #8]
 8001ade:	f009 0308 	and.w	r3, r9, #8
  if (hpcd->Init.dma_enable == 1U)
 8001ae2:	d064      	beq.n	8001bae <HAL_PCD_IRQHandler+0x5ae>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ae4:	4971      	ldr	r1, [pc, #452]	; (8001cac <HAL_PCD_IRQHandler+0x6ac>)
 8001ae6:	428a      	cmp	r2, r1
 8001ae8:	d109      	bne.n	8001afe <HAL_PCD_IRQHandler+0x4fe>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001aea:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8001aee:	f040 80cd 	bne.w	8001c8c <HAL_PCD_IRQHandler+0x68c>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001af2:	f01e 0f20 	tst.w	lr, #32
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001af6:	bf1c      	itt	ne
 8001af8:	2120      	movne	r1, #32
 8001afa:	f8ca 1008 	strne.w	r1, [sl, #8]
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001afe:	4631      	mov	r1, r6
 8001b00:	4620      	mov	r0, r4
 8001b02:	9305      	str	r3, [sp, #20]
 8001b04:	f002 f940 	bl	8003d88 <HAL_PCD_DataOutStageCallback>
 8001b08:	9b05      	ldr	r3, [sp, #20]
 8001b0a:	e77f      	b.n	8001a0c <HAL_PCD_IRQHandler+0x40c>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b0c:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8001b0e:	6921      	ldr	r1, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b12:	f503 6a30 	add.w	sl, r3, #2816	; 0xb00
 8001b16:	ea4f 1348 	mov.w	r3, r8, lsl #5
 8001b1a:	449a      	add	sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8001b1c:	2901      	cmp	r1, #1
 8001b1e:	eb0b 0503 	add.w	r5, fp, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b22:	f8da 3008 	ldr.w	r3, [sl, #8]
  if (hpcd->Init.dma_enable == 1U)
 8001b26:	d03b      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x5a0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001b28:	4960      	ldr	r1, [pc, #384]	; (8001cac <HAL_PCD_IRQHandler+0x6ac>)
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	d01d      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x56a>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001b2e:	4620      	mov	r0, r4
 8001b30:	9205      	str	r2, [sp, #20]
 8001b32:	f002 f923 	bl	8003d7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8001b38:	9a05      	ldr	r2, [sp, #20]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d81e      	bhi.n	8001b7c <HAL_PCD_IRQHandler+0x57c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b3e:	2308      	movs	r3, #8
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	60ab      	str	r3, [r5, #8]
 8001b44:	e765      	b.n	8001a12 <HAL_PCD_IRQHandler+0x412>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b50:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f043 030b 	orr.w	r3, r3, #11
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e649      	b.n	80017f0 <HAL_PCD_IRQHandler+0x1f0>
        hpcd->LPM_State = LPM_L0;
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f000 fa0e 	bl	8001f84 <HAL_PCDEx_LPM_Callback>
 8001b68:	e605      	b.n	8001776 <HAL_PCD_IRQHandler+0x176>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001b6a:	0419      	lsls	r1, r3, #16
 8001b6c:	d503      	bpl.n	8001b76 <HAL_PCD_IRQHandler+0x576>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b72:	f8ca 3008 	str.w	r3, [sl, #8]
  HAL_PCD_SetupStageCallback(hpcd);
 8001b76:	4620      	mov	r0, r4
 8001b78:	f002 f900 	bl	8003d7c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001b7c:	6921      	ldr	r1, [r4, #16]
 8001b7e:	2901      	cmp	r1, #1
 8001b80:	d1dd      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x53e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b82:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001b86:	6820      	ldr	r0, [r4, #0]
 8001b88:	f001 fad4 	bl	8003134 <USB_EP0_OutStart>
 8001b8c:	e7d7      	b.n	8001b3e <HAL_PCD_IRQHandler+0x53e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f43f af3c 	beq.w	8001a12 <HAL_PCD_IRQHandler+0x412>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b9c:	f8da 3008 	ldr.w	r3, [sl, #8]
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ba0:	4943      	ldr	r1, [pc, #268]	; (8001cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8001ba2:	428a      	cmp	r2, r1
 8001ba4:	d8e1      	bhi.n	8001b6a <HAL_PCD_IRQHandler+0x56a>
  HAL_PCD_SetupStageCallback(hpcd);
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f002 f8e8 	bl	8003d7c <HAL_PCD_SetupStageCallback>
 8001bac:	e7c7      	b.n	8001b3e <HAL_PCD_IRQHandler+0x53e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001bae:	f01e 0f08 	tst.w	lr, #8
 8001bb2:	d031      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x618>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bb4:	493e      	ldr	r1, [pc, #248]	; (8001cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8001bb6:	428a      	cmp	r2, r1
 8001bb8:	d906      	bls.n	8001bc8 <HAL_PCD_IRQHandler+0x5c8>
 8001bba:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bbe:	bf1c      	itt	ne
 8001bc0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
 8001bc4:	f8ca 2008 	strne.w	r2, [sl, #8]
      HAL_PCD_SetupStageCallback(hpcd);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	9305      	str	r3, [sp, #20]
 8001bcc:	f002 f8d6 	bl	8003d7c <HAL_PCD_SetupStageCallback>
      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bd0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	6820      	ldr	r0, [r4, #0]
 8001bd8:	f001 faac 	bl	8003134 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bdc:	2208      	movs	r2, #8
 8001bde:	f8ca 2008 	str.w	r2, [sl, #8]
 8001be2:	9b05      	ldr	r3, [sp, #20]
 8001be4:	e712      	b.n	8001a0c <HAL_PCD_IRQHandler+0x40c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001be6:	2208      	movs	r2, #8
 8001be8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001bec:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bee:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bf2:	f001 f9bb 	bl	8002f6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf6:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8001bfa:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8001bfe:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	440b      	add	r3, r1
 8001c06:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001c0a:	e54f      	b.n	80016ac <HAL_PCD_IRQHandler+0xac>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c0c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001c10:	f001 fa90 	bl	8003134 <USB_EP0_OutStart>
 8001c14:	6820      	ldr	r0, [r4, #0]
 8001c16:	e70a      	b.n	8001a2e <HAL_PCD_IRQHandler+0x42e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001c18:	f01e 0f20 	tst.w	lr, #32
 8001c1c:	d1b7      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x58e>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001c1e:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8001c22:	d1b7      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x594>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c24:	4922      	ldr	r1, [pc, #136]	; (8001cb0 <HAL_PCD_IRQHandler+0x6b0>)
 8001c26:	428a      	cmp	r2, r1
 8001c28:	d902      	bls.n	8001c30 <HAL_PCD_IRQHandler+0x630>
 8001c2a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8001c2e:	d138      	bne.n	8001ca2 <HAL_PCD_IRQHandler+0x6a2>
 8001c30:	201c      	movs	r0, #28
 8001c32:	fb00 4008 	mla	r0, r0, r8, r4
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001c36:	f8da c010 	ldr.w	ip, [sl, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c3a:	f8d0 1208 	ldr.w	r1, [r0, #520]	; 0x208
          hpcd->OUT_ep[epnum].maxpacket -
 8001c3e:	f8d0 e204 	ldr.w	lr, [r0, #516]	; 0x204
 8001c42:	9305      	str	r3, [sp, #20]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001c44:	f3cc 0c12 	ubfx	ip, ip, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001c48:	ebae 0c0c 	sub.w	ip, lr, ip
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c4c:	448e      	add	lr, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8001c4e:	f8c0 c214 	str.w	ip, [r0, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c52:	f8c0 e208 	str.w	lr, [r0, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c56:	4631      	mov	r1, r6
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f002 f895 	bl	8003d88 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c5e:	9b05      	ldr	r3, [sp, #20]
 8001c60:	f1b8 0f00 	cmp.w	r8, #0
 8001c64:	f47f aed2 	bne.w	8001a0c <HAL_PCD_IRQHandler+0x40c>
 8001c68:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	f47f aecd 	bne.w	8001a0c <HAL_PCD_IRQHandler+0x40c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c72:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001c76:	2101      	movs	r1, #1
 8001c78:	6820      	ldr	r0, [r4, #0]
 8001c7a:	f001 fa5b 	bl	8003134 <USB_EP0_OutStart>
 8001c7e:	9b05      	ldr	r3, [sp, #20]
 8001c80:	e6c4      	b.n	8001a0c <HAL_PCD_IRQHandler+0x40c>
 8001c82:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8001c86:	f8d4 8000 	ldr.w	r8, [r4]
 8001c8a:	e692      	b.n	80019b2 <HAL_PCD_IRQHandler+0x3b2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c90:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f43f aebc 	beq.w	8001a12 <HAL_PCD_IRQHandler+0x412>
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c9a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001c9c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001ca0:	e742      	b.n	8001b28 <HAL_PCD_IRQHandler+0x528>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ca6:	f8ca 2008 	str.w	r2, [sl, #8]
 8001caa:	e773      	b.n	8001b94 <HAL_PCD_IRQHandler+0x594>
 8001cac:	4f54310a 	.word	0x4f54310a
 8001cb0:	4f54300a 	.word	0x4f54300a

08001cb4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001cb4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001cb8:	2a01      	cmp	r2, #1
 8001cba:	d00d      	beq.n	8001cd8 <HAL_PCD_SetAddress+0x24>
{
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cc0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8001cc2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8001cc6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cca:	6800      	ldr	r0, [r0, #0]
 8001ccc:	f001 f9b8 	bl	8003040 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001cd6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001cd8:	2002      	movs	r0, #2
}
 8001cda:	4770      	bx	lr

08001cdc <HAL_PCD_EP_Open>:
{
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	f001 050f 	and.w	r5, r1, #15
 8001ce2:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
    ep->is_in = 1U;
 8001ce6:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8001cea:	0609      	lsls	r1, r1, #24
 8001cec:	ea4f 0484 	mov.w	r4, r4, lsl #2
    ep->is_in = 1U;
 8001cf0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001cf4:	d41e      	bmi.n	8001d34 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf6:	f504 74fe 	add.w	r4, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8001cfa:	2700      	movs	r7, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	1901      	adds	r1, r0, r4
    ep->is_in = 0U;
 8001cfe:	f886 71fd 	strb.w	r7, [r6, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8001d02:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d04:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8001d06:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001d08:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001d0a:	b104      	cbz	r4, 8001d0e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8001d0c:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001d0e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8001d10:	bf04      	itt	eq
 8001d12:	2300      	moveq	r3, #0
 8001d14:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001d16:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d010      	beq.n	8001d40 <HAL_PCD_EP_Open+0x64>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4604      	mov	r4, r0
 8001d22:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d26:	6800      	ldr	r0, [r0, #0]
 8001d28:	f000 ff10 	bl	8002b4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d34:	343c      	adds	r4, #60	; 0x3c
    ep->is_in = 1U;
 8001d36:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d38:	1901      	adds	r1, r0, r4
    ep->is_in = 1U;
 8001d3a:	f886 703d 	strb.w	r7, [r6, #61]	; 0x3d
 8001d3e:	e7e0      	b.n	8001d02 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8001d40:	2002      	movs	r0, #2
}
 8001d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d44 <HAL_PCD_EP_Close>:
{
 8001d44:	f001 020f 	and.w	r2, r1, #15
 8001d48:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001d4a:	0609      	lsls	r1, r1, #24
 8001d4c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8001d50:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 8001d54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d58:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	d415      	bmi.n	8001d8a <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d62:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8001d64:	2500      	movs	r5, #0
 8001d66:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d6a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001d6c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d014      	beq.n	8001d9e <HAL_PCD_EP_Close+0x5a>
 8001d74:	2301      	movs	r3, #1
 8001d76:	4604      	mov	r4, r0
 8001d78:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d7c:	6800      	ldr	r0, [r0, #0]
 8001d7e:	f000 ff29 	bl	8002bd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001d88:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	333c      	adds	r3, #60	; 0x3c
 8001d8c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8001d8e:	2501      	movs	r5, #1
 8001d90:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d94:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001d96:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d1ea      	bne.n	8001d74 <HAL_PCD_EP_Close+0x30>
 8001d9e:	2002      	movs	r0, #2
}
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
 8001da2:	bf00      	nop

08001da4 <HAL_PCD_EP_Receive>:
{
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8001daa:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8001dae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->xfer_count = 0U;
 8001db2:	2100      	movs	r1, #0
  ep->xfer_buff = pBuf;
 8001db4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8001db8:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001dbc:	f884 11fd 	strb.w	r1, [r4, #509]	; 0x1fd
  ep->xfer_len = len;
 8001dc0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001dc8:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	211c      	movs	r1, #28
 8001dcc:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8001dd0:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001dd2:	bf08      	it	eq
 8001dd4:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8001ddc:	6800      	ldr	r0, [r0, #0]
 8001dde:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001de0:	b11d      	cbz	r5, 8001dea <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de2:	f000 ff2b 	bl	8002c3c <USB_EPStartXfer>
}
 8001de6:	2000      	movs	r0, #0
 8001de8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dea:	f001 f829 	bl	8002e40 <USB_EP0StartXfer>
}
 8001dee:	2000      	movs	r0, #0
 8001df0:	bd38      	pop	{r3, r4, r5, pc}
 8001df2:	bf00      	nop

08001df4 <HAL_PCD_EP_Transmit>:
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_buff = pBuf;
 8001dfa:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8001dfe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep->is_in = 1U;
 8001e02:	2101      	movs	r1, #1
  ep->xfer_count = 0U;
 8001e04:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8001e06:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8001e08:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  ep->xfer_len = len;
 8001e0c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001e12:	6566      	str	r6, [r4, #84]	; 0x54
  if (hpcd->Init.dma_enable == 1U)
 8001e14:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e16:	211c      	movs	r1, #28
 8001e18:	fb01 0105 	mla	r1, r1, r5, r0
  if (hpcd->Init.dma_enable == 1U)
 8001e1c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001e1e:	bf08      	it	eq
 8001e20:	64e2      	streq	r2, [r4, #76]	; 0x4c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	313c      	adds	r1, #60	; 0x3c
 8001e24:	6800      	ldr	r0, [r0, #0]
 8001e26:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e28:	b11d      	cbz	r5, 8001e32 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2a:	f000 ff07 	bl	8002c3c <USB_EPStartXfer>
}
 8001e2e:	2000      	movs	r0, #0
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e32:	f001 f805 	bl	8002e40 <USB_EP0StartXfer>
}
 8001e36:	2000      	movs	r0, #0
 8001e38:	bd70      	pop	{r4, r5, r6, pc}
 8001e3a:	bf00      	nop

08001e3c <HAL_PCD_EP_SetStall>:
{
 8001e3c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e3e:	6843      	ldr	r3, [r0, #4]
 8001e40:	f001 050f 	and.w	r5, r1, #15
 8001e44:	429d      	cmp	r5, r3
 8001e46:	d81f      	bhi.n	8001e88 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8001e48:	060b      	lsls	r3, r1, #24
 8001e4a:	d41f      	bmi.n	8001e8c <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8001e4c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8001e50:	241c      	movs	r4, #28
 8001e52:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8001e56:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001e5a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001e5c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8001e60:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8001e64:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e66:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001e68:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001e6a:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d01e      	beq.n	8001eb0 <HAL_PCD_EP_SetStall+0x74>
 8001e72:	4604      	mov	r4, r0
 8001e74:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e78:	6800      	ldr	r0, [r0, #0]
 8001e7a:	f001 f889 	bl	8002f90 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7e:	b1cd      	cbz	r5, 8001eb4 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001e86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e88:	2001      	movs	r0, #1
}
 8001e8a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8001e8c:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	211c      	movs	r1, #28
 8001e92:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8001e96:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001e9a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8001ea2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001ea6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001ea8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1e0      	bne.n	8001e72 <HAL_PCD_EP_SetStall+0x36>
 8001eb0:	2002      	movs	r0, #2
}
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eb4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001eb8:	7c21      	ldrb	r1, [r4, #16]
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	f001 f93a 	bl	8003134 <USB_EP0_OutStart>
 8001ec0:	e7de      	b.n	8001e80 <HAL_PCD_EP_SetStall+0x44>
 8001ec2:	bf00      	nop

08001ec4 <HAL_PCD_EP_ClrStall>:
{
 8001ec4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ec6:	6843      	ldr	r3, [r0, #4]
 8001ec8:	f001 020f 	and.w	r2, r1, #15
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d821      	bhi.n	8001f14 <HAL_PCD_EP_ClrStall+0x50>
 8001ed0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
    ep->is_in = 1U;
 8001ed4:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8001ed8:	0609      	lsls	r1, r1, #24
 8001eda:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ep->is_in = 1U;
 8001ede:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	d419      	bmi.n	8001f18 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ee4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ee8:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8001eea:	2500      	movs	r5, #0
 8001eec:	f884 51fd 	strb.w	r5, [r4, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001ef0:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef2:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001ef4:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001ef6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d018      	beq.n	8001f30 <HAL_PCD_EP_ClrStall+0x6c>
 8001efe:	4604      	mov	r4, r0
 8001f00:	2301      	movs	r3, #1
 8001f02:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f06:	6800      	ldr	r0, [r0, #0]
 8001f08:	f001 f86e 	bl	8002fe8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f0c:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001f10:	4628      	mov	r0, r5
}
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
}
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	333c      	adds	r3, #60	; 0x3c
 8001f1a:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8001f1c:	2501      	movs	r5, #1
 8001f1e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8001f22:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f24:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001f26:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001f28:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d1e6      	bne.n	8001efe <HAL_PCD_EP_ClrStall+0x3a>
 8001f30:	2002      	movs	r0, #2
}
 8001f32:	bd38      	pop	{r3, r4, r5, pc}

08001f34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f34:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f36:	6805      	ldr	r5, [r0, #0]
 8001f38:	0412      	lsls	r2, r2, #16
 8001f3a:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8001f3c:	b1c1      	cbz	r1, 8001f70 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8001f40:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f46:	d00b      	beq.n	8001f60 <HAL_PCDEx_SetTxFiFo+0x2c>
 8001f48:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f4a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8001f4e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8001f52:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f54:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f5a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f5e:	d3f4      	bcc.n	8001f4a <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f60:	3140      	adds	r1, #64	; 0x40
 8001f62:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001f66:	4314      	orrs	r4, r2
 8001f68:	604c      	str	r4, [r1, #4]
  }

  return HAL_OK;
}
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	bc30      	pop	{r4, r5}
 8001f6e:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f70:	4314      	orrs	r4, r2
 8001f72:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001f74:	2000      	movs	r0, #0
 8001f76:	bc30      	pop	{r4, r5}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f7c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8001f7e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001f80:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001f82:	4770      	bx	lr

08001f84 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	f000 8132 	beq.w	80021f2 <HAL_RCC_OscConfig+0x26a>
{
 8001f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	07dd      	lsls	r5, r3, #31
{
 8001f96:	b082      	sub	sp, #8
 8001f98:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	d52f      	bpl.n	8001ffc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9c:	49ac      	ldr	r1, [pc, #688]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8001f9e:	688a      	ldr	r2, [r1, #8]
 8001fa0:	f002 020c 	and.w	r2, r2, #12
 8001fa4:	2a04      	cmp	r2, #4
 8001fa6:	f000 80ea 	beq.w	800217e <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001faa:	688a      	ldr	r2, [r1, #8]
 8001fac:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb0:	2a08      	cmp	r2, #8
 8001fb2:	f000 80e0 	beq.w	8002176 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	6863      	ldr	r3, [r4, #4]
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	f000 80e9 	beq.w	8002192 <HAL_RCC_OscConfig+0x20a>
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc4:	f000 8178 	beq.w	80022b8 <HAL_RCC_OscConfig+0x330>
 8001fc8:	4da1      	ldr	r5, [pc, #644]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8001fca:	682a      	ldr	r2, [r5, #0]
 8001fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fd0:	602a      	str	r2, [r5, #0]
 8001fd2:	682a      	ldr	r2, [r5, #0]
 8001fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 80de 	bne.w	800219c <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fdae 	bl	8000b40 <HAL_GetTick>
 8001fe4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e005      	b.n	8001ff4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fdaa 	bl	8000b40 <HAL_GetTick>
 8001fec:	1b80      	subs	r0, r0, r6
 8001fee:	2864      	cmp	r0, #100	; 0x64
 8001ff0:	f200 80f2 	bhi.w	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	039b      	lsls	r3, r3, #14
 8001ff8:	d4f6      	bmi.n	8001fe8 <HAL_RCC_OscConfig+0x60>
 8001ffa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffc:	079f      	lsls	r7, r3, #30
 8001ffe:	d475      	bmi.n	80020ec <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002000:	071a      	lsls	r2, r3, #28
 8002002:	d515      	bpl.n	8002030 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002004:	6963      	ldr	r3, [r4, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80a5 	beq.w	8002156 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200c:	4b91      	ldr	r3, [pc, #580]	; (8002254 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	4d90      	ldr	r5, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002014:	f7fe fd94 	bl	8000b40 <HAL_GetTick>
 8002018:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e005      	b.n	8002028 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7fe fd90 	bl	8000b40 <HAL_GetTick>
 8002020:	1b80      	subs	r0, r0, r6
 8002022:	2802      	cmp	r0, #2
 8002024:	f200 80d8 	bhi.w	80021d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002028:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800202a:	079b      	lsls	r3, r3, #30
 800202c:	d5f6      	bpl.n	800201c <HAL_RCC_OscConfig+0x94>
 800202e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	0758      	lsls	r0, r3, #29
 8002032:	d53b      	bpl.n	80020ac <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002034:	4a86      	ldr	r2, [pc, #536]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8002036:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002038:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800203c:	f040 80db 	bne.w	80021f6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002054:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4d80      	ldr	r5, [pc, #512]	; (8002258 <HAL_RCC_OscConfig+0x2d0>)
 8002058:	682a      	ldr	r2, [r5, #0]
 800205a:	05d1      	lsls	r1, r2, #23
 800205c:	f140 80ac 	bpl.w	80021b8 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	68a3      	ldr	r3, [r4, #8]
 8002062:	2b01      	cmp	r3, #1
 8002064:	f000 80c9 	beq.w	80021fa <HAL_RCC_OscConfig+0x272>
 8002068:	2b05      	cmp	r3, #5
 800206a:	f000 812f 	beq.w	80022cc <HAL_RCC_OscConfig+0x344>
 800206e:	4d78      	ldr	r5, [pc, #480]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8002070:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	672a      	str	r2, [r5, #112]	; 0x70
 8002078:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80bf 	bne.w	8002204 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7fe fd5b 	bl	8000b40 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800208e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e006      	b.n	80020a0 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe fd55 	bl	8000b40 <HAL_GetTick>
 8002096:	eba0 0008 	sub.w	r0, r0, r8
 800209a:	42b8      	cmp	r0, r7
 800209c:	f200 809c 	bhi.w	80021d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020a2:	0798      	lsls	r0, r3, #30
 80020a4:	d4f5      	bmi.n	8002092 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a6:	2e00      	cmp	r6, #0
 80020a8:	f040 80dc 	bne.w	8002264 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ac:	69a0      	ldr	r0, [r4, #24]
 80020ae:	b1c8      	cbz	r0, 80020e4 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b0:	4d67      	ldr	r5, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 80020b2:	68aa      	ldr	r2, [r5, #8]
 80020b4:	f002 020c 	and.w	r2, r2, #12
 80020b8:	2a08      	cmp	r2, #8
 80020ba:	f000 80d9 	beq.w	8002270 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 80020c0:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80020c4:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c6:	f000 810b 	beq.w	80022e0 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fd39 	bl	8000b40 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80020d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e004      	b.n	80020de <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fd34 	bl	8000b40 <HAL_GetTick>
 80020d8:	1b40      	subs	r0, r0, r5
 80020da:	2802      	cmp	r0, #2
 80020dc:	d87c      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	6823      	ldr	r3, [r4, #0]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	d4f7      	bmi.n	80020d4 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80020e4:	2000      	movs	r0, #0
}
 80020e6:	b002      	add	sp, #8
 80020e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 80020ee:	6891      	ldr	r1, [r2, #8]
 80020f0:	f011 0f0c 	tst.w	r1, #12
 80020f4:	d024      	beq.n	8002140 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	6891      	ldr	r1, [r2, #8]
 80020f8:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fc:	2908      	cmp	r1, #8
 80020fe:	d01c      	beq.n	800213a <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002100:	68e3      	ldr	r3, [r4, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8092 	beq.w	800222c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b55      	ldr	r3, [pc, #340]	; (8002260 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4d51      	ldr	r5, [pc, #324]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002110:	f7fe fd16 	bl	8000b40 <HAL_GetTick>
 8002114:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	e004      	b.n	8002122 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe fd12 	bl	8000b40 <HAL_GetTick>
 800211c:	1b80      	subs	r0, r0, r6
 800211e:	2802      	cmp	r0, #2
 8002120:	d85a      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	682b      	ldr	r3, [r5, #0]
 8002124:	0798      	lsls	r0, r3, #30
 8002126:	d5f7      	bpl.n	8002118 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	6922      	ldr	r2, [r4, #16]
 800212c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002130:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002134:	602b      	str	r3, [r5, #0]
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	e762      	b.n	8002000 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	6852      	ldr	r2, [r2, #4]
 800213c:	0256      	lsls	r6, r2, #9
 800213e:	d4df      	bmi.n	8002100 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002140:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	0795      	lsls	r5, r2, #30
 8002146:	d54b      	bpl.n	80021e0 <HAL_RCC_OscConfig+0x258>
 8002148:	68e2      	ldr	r2, [r4, #12]
 800214a:	2a01      	cmp	r2, #1
 800214c:	d048      	beq.n	80021e0 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800214e:	2001      	movs	r0, #1
}
 8002150:	b002      	add	sp, #8
 8002152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002156:	4a3f      	ldr	r2, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4d3d      	ldr	r5, [pc, #244]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800215a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800215c:	f7fe fcf0 	bl	8000b40 <HAL_GetTick>
 8002160:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002162:	e004      	b.n	800216e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002164:	f7fe fcec 	bl	8000b40 <HAL_GetTick>
 8002168:	1b80      	subs	r0, r0, r6
 800216a:	2802      	cmp	r0, #2
 800216c:	d834      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002170:	079f      	lsls	r7, r3, #30
 8002172:	d4f7      	bmi.n	8002164 <HAL_RCC_OscConfig+0x1dc>
 8002174:	e75b      	b.n	800202e <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	684a      	ldr	r2, [r1, #4]
 8002178:	0250      	lsls	r0, r2, #9
 800217a:	f57f af1c 	bpl.w	8001fb6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	0391      	lsls	r1, r2, #14
 8002184:	f57f af3a 	bpl.w	8001ffc <HAL_RCC_OscConfig+0x74>
 8002188:	6862      	ldr	r2, [r4, #4]
 800218a:	2a00      	cmp	r2, #0
 800218c:	f47f af36 	bne.w	8001ffc <HAL_RCC_OscConfig+0x74>
 8002190:	e7dd      	b.n	800214e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800219c:	f7fe fcd0 	bl	8000b40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	4d2b      	ldr	r5, [pc, #172]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80021a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a4:	e004      	b.n	80021b0 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a6:	f7fe fccb 	bl	8000b40 <HAL_GetTick>
 80021aa:	1b80      	subs	r0, r0, r6
 80021ac:	2864      	cmp	r0, #100	; 0x64
 80021ae:	d813      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	039a      	lsls	r2, r3, #14
 80021b4:	d5f7      	bpl.n	80021a6 <HAL_RCC_OscConfig+0x21e>
 80021b6:	e720      	b.n	8001ffa <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b8:	682a      	ldr	r2, [r5, #0]
 80021ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021be:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80021c0:	f7fe fcbe 	bl	8000b40 <HAL_GetTick>
 80021c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	05da      	lsls	r2, r3, #23
 80021ca:	f53f af49 	bmi.w	8002060 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7fe fcb7 	bl	8000b40 <HAL_GetTick>
 80021d2:	1bc0      	subs	r0, r0, r7
 80021d4:	2802      	cmp	r0, #2
 80021d6:	d9f6      	bls.n	80021c6 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 80021d8:	2003      	movs	r0, #3
}
 80021da:	b002      	add	sp, #8
 80021dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	491b      	ldr	r1, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 80021e2:	6920      	ldr	r0, [r4, #16]
 80021e4:	680a      	ldr	r2, [r1, #0]
 80021e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80021ea:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80021ee:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f0:	e706      	b.n	8002000 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 80021f2:	2001      	movs	r0, #1
}
 80021f4:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2600      	movs	r6, #0
 80021f8:	e72d      	b.n	8002056 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
 80021fc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002204:	f7fe fc9c 	bl	8000b40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4d11      	ldr	r5, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800220a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e005      	b.n	800221e <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fc95 	bl	8000b40 <HAL_GetTick>
 8002216:	eba0 0008 	sub.w	r0, r0, r8
 800221a:	42b8      	cmp	r0, r7
 800221c:	d8dc      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002220:	079b      	lsls	r3, r3, #30
 8002222:	d5f6      	bpl.n	8002212 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8002224:	2e00      	cmp	r6, #0
 8002226:	f43f af41 	beq.w	80020ac <HAL_RCC_OscConfig+0x124>
 800222a:	e01b      	b.n	8002264 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	4d08      	ldr	r5, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8002230:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002232:	f7fe fc85 	bl	8000b40 <HAL_GetTick>
 8002236:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002238:	e004      	b.n	8002244 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223a:	f7fe fc81 	bl	8000b40 <HAL_GetTick>
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	2802      	cmp	r0, #2
 8002242:	d8c9      	bhi.n	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	0799      	lsls	r1, r3, #30
 8002248:	d4f7      	bmi.n	800223a <HAL_RCC_OscConfig+0x2b2>
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	e6d8      	b.n	8002000 <HAL_RCC_OscConfig+0x78>
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	42470e80 	.word	0x42470e80
 8002258:	40007000 	.word	0x40007000
 800225c:	42470060 	.word	0x42470060
 8002260:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8002264:	4a35      	ldr	r2, [pc, #212]	; (800233c <HAL_RCC_OscConfig+0x3b4>)
 8002266:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	e71d      	b.n	80020ac <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	2801      	cmp	r0, #1
 8002272:	f43f af6d 	beq.w	8002150 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->CFGR;
 8002276:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002278:	69e2      	ldr	r2, [r4, #28]
 800227a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800227e:	4291      	cmp	r1, r2
 8002280:	f47f af65 	bne.w	800214e <HAL_RCC_OscConfig+0x1c6>
 8002284:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002286:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	4291      	cmp	r1, r2
 800228c:	f47f af5f 	bne.w	800214e <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002290:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002294:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002296:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002298:	428a      	cmp	r2, r1
 800229a:	f47f af58 	bne.w	800214e <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800229e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022a4:	4291      	cmp	r1, r2
 80022a6:	f47f af52 	bne.w	800214e <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80022b0:	1a18      	subs	r0, r3, r0
 80022b2:	bf18      	it	ne
 80022b4:	2001      	movne	r0, #1
 80022b6:	e74b      	b.n	8002150 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_OscConfig+0x3b4>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e767      	b.n	800219c <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x3b4>)
 80022ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d0:	f042 0204 	orr.w	r2, r2, #4
 80022d4:	671a      	str	r2, [r3, #112]	; 0x70
 80022d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	671a      	str	r2, [r3, #112]	; 0x70
 80022de:	e791      	b.n	8002204 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80022e0:	f7fe fc2e 	bl	8000b40 <HAL_GetTick>
 80022e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	e005      	b.n	80022f4 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fc2a 	bl	8000b40 <HAL_GetTick>
 80022ec:	1b80      	subs	r0, r0, r6
 80022ee:	2802      	cmp	r0, #2
 80022f0:	f63f af72 	bhi.w	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	0199      	lsls	r1, r3, #6
 80022f8:	d4f6      	bmi.n	80022e8 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022fa:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80022fe:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002302:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	4c0d      	ldr	r4, [pc, #52]	; (800233c <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002306:	4333      	orrs	r3, r6
 8002308:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002312:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002314:	490a      	ldr	r1, [pc, #40]	; (8002340 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800231a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800231c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800231e:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002320:	f7fe fc0e 	bl	8000b40 <HAL_GetTick>
 8002324:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	e005      	b.n	8002334 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fc0a 	bl	8000b40 <HAL_GetTick>
 800232c:	1b40      	subs	r0, r0, r5
 800232e:	2802      	cmp	r0, #2
 8002330:	f63f af52 	bhi.w	80021d8 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	019a      	lsls	r2, r3, #6
 8002338:	d5f6      	bpl.n	8002328 <HAL_RCC_OscConfig+0x3a0>
 800233a:	e6d3      	b.n	80020e4 <HAL_RCC_OscConfig+0x15c>
 800233c:	40023800 	.word	0x40023800
 8002340:	42470060 	.word	0x42470060

08002344 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002344:	4917      	ldr	r1, [pc, #92]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002346:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002348:	688b      	ldr	r3, [r1, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d01b      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x46>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d117      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002356:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002358:	684b      	ldr	r3, [r1, #4]
 800235a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002362:	d114      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002364:	6849      	ldr	r1, [r1, #4]
 8002366:	4810      	ldr	r0, [pc, #64]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x64>)
 8002368:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800236c:	fba1 0100 	umull	r0, r1, r1, r0
 8002370:	f7fd ff2a 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800237c:	3301      	adds	r3, #1
 800237e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002380:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002384:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002388:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <HAL_RCC_GetSysClockFreq+0x68>)
}
 800238c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238e:	684b      	ldr	r3, [r1, #4]
 8002390:	4806      	ldr	r0, [pc, #24]	; (80023ac <HAL_RCC_GetSysClockFreq+0x68>)
 8002392:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002396:	fba3 0100 	umull	r0, r1, r3, r0
 800239a:	2300      	movs	r3, #0
 800239c:	f7fd ff14 	bl	80001c8 <__aeabi_uldivmod>
 80023a0:	e7e8      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x30>
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	00f42400 	.word	0x00f42400
 80023ac:	007a1200 	.word	0x007a1200

080023b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80023b0:	b160      	cbz	r0, 80023cc <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b2:	4a49      	ldr	r2, [pc, #292]	; (80024d8 <HAL_RCC_ClockConfig+0x128>)
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	428b      	cmp	r3, r1
 80023bc:	d208      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	b2cb      	uxtb	r3, r1
 80023c0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	6813      	ldr	r3, [r2, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
}
 80023ce:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	6803      	ldr	r3, [r0, #0]
{
 80023d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d6:	079d      	lsls	r5, r3, #30
 80023d8:	d514      	bpl.n	8002404 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	075c      	lsls	r4, r3, #29
 80023dc:	d504      	bpl.n	80023e8 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023de:	4c3f      	ldr	r4, [pc, #252]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 80023e0:	68a2      	ldr	r2, [r4, #8]
 80023e2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80023e6:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	071a      	lsls	r2, r3, #28
 80023ea:	d504      	bpl.n	80023f6 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4c3b      	ldr	r4, [pc, #236]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 80023ee:	68a2      	ldr	r2, [r4, #8]
 80023f0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80023f4:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f6:	4c39      	ldr	r4, [pc, #228]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 80023f8:	6885      	ldr	r5, [r0, #8]
 80023fa:	68a2      	ldr	r2, [r4, #8]
 80023fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002400:	432a      	orrs	r2, r5
 8002402:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002404:	07df      	lsls	r7, r3, #31
 8002406:	4604      	mov	r4, r0
 8002408:	460d      	mov	r5, r1
 800240a:	d522      	bpl.n	8002452 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240c:	6842      	ldr	r2, [r0, #4]
 800240e:	2a01      	cmp	r2, #1
 8002410:	d057      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	1e93      	subs	r3, r2, #2
 8002414:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 8002418:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	d959      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	0799      	lsls	r1, r3, #30
 800241e:	d525      	bpl.n	800246c <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002420:	4e2e      	ldr	r6, [pc, #184]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 8002422:	68b3      	ldr	r3, [r6, #8]
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	4313      	orrs	r3, r2
 800242a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800242c:	f7fe fb88 	bl	8000b40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002434:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e005      	b.n	8002444 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fb82 	bl	8000b40 <HAL_GetTick>
 800243c:	eba0 0008 	sub.w	r0, r0, r8
 8002440:	42b8      	cmp	r0, r7
 8002442:	d843      	bhi.n	80024cc <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	68b3      	ldr	r3, [r6, #8]
 8002446:	6862      	ldr	r2, [r4, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002450:	d1f2      	bne.n	8002438 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_RCC_ClockConfig+0x128>)
 8002454:	6813      	ldr	r3, [r2, #0]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	42ab      	cmp	r3, r5
 800245c:	d909      	bls.n	8002472 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	b2eb      	uxtb	r3, r5
 8002460:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	42ab      	cmp	r3, r5
 800246a:	d002      	beq.n	8002472 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 800246c:	2001      	movs	r0, #1
}
 800246e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	075a      	lsls	r2, r3, #29
 8002476:	d506      	bpl.n	8002486 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4918      	ldr	r1, [pc, #96]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 800247a:	68e0      	ldr	r0, [r4, #12]
 800247c:	688a      	ldr	r2, [r1, #8]
 800247e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002482:	4302      	orrs	r2, r0
 8002484:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	071b      	lsls	r3, r3, #28
 8002488:	d412      	bmi.n	80024b0 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248a:	f7ff ff5b 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 8002490:	4c13      	ldr	r4, [pc, #76]	; (80024e0 <HAL_RCC_ClockConfig+0x130>)
 8002492:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8002494:	4913      	ldr	r1, [pc, #76]	; (80024e4 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_RCC_ClockConfig+0x138>)
 8002498:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800249c:	5ce3      	ldrb	r3, [r4, r3]
 800249e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80024a2:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80024a6:	f7fe fb01 	bl	8000aac <HAL_InitTick>
  return HAL_OK;
 80024aa:	2000      	movs	r0, #0
}
 80024ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 80024b2:	6921      	ldr	r1, [r4, #16]
 80024b4:	6893      	ldr	r3, [r2, #8]
 80024b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	e7e3      	b.n	800248a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_ClockConfig+0x12c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	039e      	lsls	r6, r3, #14
 80024c8:	d4aa      	bmi.n	8002420 <HAL_RCC_ClockConfig+0x70>
 80024ca:	e7cf      	b.n	800246c <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80024cc:	2003      	movs	r0, #3
 80024ce:	e7ed      	b.n	80024ac <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d0:	0198      	lsls	r0, r3, #6
 80024d2:	d4a5      	bmi.n	8002420 <HAL_RCC_ClockConfig+0x70>
 80024d4:	e7ca      	b.n	800246c <HAL_RCC_ClockConfig+0xbc>
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00
 80024dc:	40023800 	.word	0x40023800
 80024e0:	080041ac 	.word	0x080041ac
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000000 	.word	0x20000000

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_RCC_GetPCLK1Freq+0x14>)
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x18>)
 80024fc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80024fe:	4905      	ldr	r1, [pc, #20]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002500:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002504:	6808      	ldr	r0, [r1, #0]
 8002506:	5cd3      	ldrb	r3, [r2, r3]
}
 8002508:	40d8      	lsrs	r0, r3
 800250a:	4770      	bx	lr
 800250c:	40023800 	.word	0x40023800
 8002510:	080041bc 	.word	0x080041bc
 8002514:	20000000 	.word	0x20000000

08002518 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f010 0f05 	tst.w	r0, #5
{
 8002522:	b083      	sub	sp, #12
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002524:	d15c      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002526:	f010 0002 	ands.w	r0, r0, #2
 800252a:	d101      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x18>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 800252c:	b003      	add	sp, #12
 800252e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b45      	ldr	r3, [pc, #276]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    PWR->CR |= PWR_CR_DBP;
 8002532:	4c46      	ldr	r4, [pc, #280]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	2200      	movs	r2, #0
 8002536:	9201      	str	r2, [sp, #4]
 8002538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800253e:	641a      	str	r2, [r3, #64]	; 0x40
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002552:	f7fe faf5 	bl	8000b40 <HAL_GetTick>
 8002556:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002558:	e004      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe faf1 	bl	8000b40 <HAL_GetTick>
 800255e:	1b80      	subs	r0, r0, r6
 8002560:	2802      	cmp	r0, #2
 8002562:	d83a      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	05d9      	lsls	r1, r3, #23
 8002568:	d5f7      	bpl.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x42>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800256a:	4937      	ldr	r1, [pc, #220]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256c:	68eb      	ldr	r3, [r5, #12]
 800256e:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002570:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8002574:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002578:	d010      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x84>
 800257a:	4282      	cmp	r2, r0
 800257c:	d00e      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x84>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800257e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002580:	4a33      	ldr	r2, [pc, #204]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002586:	2401      	movs	r4, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002588:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 800258a:	6014      	str	r4, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800258c:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 800258e:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002590:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002592:	07da      	lsls	r2, r3, #31
 8002594:	d413      	bmi.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002596:	68eb      	ldr	r3, [r5, #12]
 8002598:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 80025a0:	d047      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80025a2:	4929      	ldr	r1, [pc, #164]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a4:	688a      	ldr	r2, [r1, #8]
 80025a6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80025aa:	608a      	str	r2, [r1, #8]
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ae:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	430b      	orrs	r3, r1
  return HAL_OK;
 80025b6:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
}
 80025ba:	b003      	add	sp, #12
 80025bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025be:	460c      	mov	r4, r1
        tickstart = HAL_GetTick();
 80025c0:	f7fe fabe 	bl	8000b40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80025c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80025cc:	079b      	lsls	r3, r3, #30
 80025ce:	d4e2      	bmi.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7fe fab6 	bl	8000b40 <HAL_GetTick>
 80025d4:	1bc0      	subs	r0, r0, r7
 80025d6:	42b0      	cmp	r0, r6
 80025d8:	d9f7      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
        return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
}
 80025dc:	b003      	add	sp, #12
 80025de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e2:	4c19      	ldr	r4, [pc, #100]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_DISABLE();
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80025e8:	f7fe faaa 	bl	8000b40 <HAL_GetTick>
 80025ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ee:	e004      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025f0:	f7fe faa6 	bl	8000b40 <HAL_GetTick>
 80025f4:	1b80      	subs	r0, r0, r6
 80025f6:	2802      	cmp	r0, #2
 80025f8:	d8ef      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	011f      	lsls	r7, r3, #4
 80025fe:	d4f7      	bmi.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002600:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002606:	4e10      	ldr	r6, [pc, #64]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 800260e:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002610:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002614:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002616:	f7fe fa93 	bl	8000b40 <HAL_GetTick>
 800261a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800261c:	e004      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800261e:	f7fe fa8f 	bl	8000b40 <HAL_GetTick>
 8002622:	1b00      	subs	r0, r0, r4
 8002624:	2802      	cmp	r0, #2
 8002626:	d8d8      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	0118      	lsls	r0, r3, #4
 800262c:	d5f7      	bpl.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800262e:	6828      	ldr	r0, [r5, #0]
 8002630:	e779      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002634:	6882      	ldr	r2, [r0, #8]
 8002636:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800263a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800263e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002642:	430a      	orrs	r2, r1
 8002644:	6082      	str	r2, [r0, #8]
 8002646:	e7b1      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000
 8002650:	42470e40 	.word	0x42470e40
 8002654:	42470068 	.word	0x42470068

08002658 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002658:	2801      	cmp	r0, #1
 800265a:	d109      	bne.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800265c:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800265e:	6893      	ldr	r3, [r2, #8]
      switch (srcclk)
 8002660:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002664:	d006      	beq.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8002666:	2b01      	cmp	r3, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002668:	4810      	ldr	r0, [pc, #64]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 800266a:	bf18      	it	ne
 800266c:	2000      	movne	r0, #0
 800266e:	4770      	bx	lr
 8002670:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002672:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002674:	6853      	ldr	r3, [r2, #4]
 8002676:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800267a:	6853      	ldr	r3, [r2, #4]
 800267c:	bf14      	ite	ne
 800267e:	480c      	ldrne	r0, [pc, #48]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002680:	480c      	ldreq	r0, [pc, #48]	; (80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>)
 8002682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002686:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800268c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002694:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002698:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800269c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80026a0:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	00bb8000 	.word	0x00bb8000
 80026b0:	007a1200 	.word	0x007a1200
 80026b4:	00f42400 	.word	0x00f42400

080026b8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d03b      	beq.n	8002734 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026bc:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c0:	2300      	movs	r3, #0
{
 80026c2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80026c8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80026cc:	b362      	cbz	r2, 8002728 <HAL_SPI_Init+0x70>
 80026ce:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80026d4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80026d8:	432b      	orrs	r3, r5
 80026da:	4313      	orrs	r3, r2
 80026dc:	6962      	ldr	r2, [r4, #20]
 80026de:	69e5      	ldr	r5, [r4, #28]
 80026e0:	6a26      	ldr	r6, [r4, #32]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	4313      	orrs	r3, r2
 80026e6:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 80026e8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026ea:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80026ec:	2502      	movs	r5, #2
 80026ee:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026f2:	4333      	orrs	r3, r6
 80026f4:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 80026f8:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026fa:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80026fc:	0c12      	lsrs	r2, r2, #16
 80026fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002700:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002704:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002706:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8002708:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 800270c:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800270e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002710:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002712:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002714:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800271a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800271c:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 800271e:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002720:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002722:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8002726:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002728:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800272c:	f7fe f900 	bl	8000930 <HAL_SPI_MspInit>
 8002730:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002732:	e7cd      	b.n	80026d0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002734:	2001      	movs	r0, #1
}
 8002736:	4770      	bx	lr

08002738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <USB_CoreReset+0x30>)
 800273a:	e001      	b.n	8002740 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800273c:	3b01      	subs	r3, #1
 800273e:	d010      	beq.n	8002762 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002740:	6902      	ldr	r2, [r0, #16]
 8002742:	2a00      	cmp	r2, #0
 8002744:	dafa      	bge.n	800273c <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002746:	6903      	ldr	r3, [r0, #16]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <USB_CoreReset+0x30>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6103      	str	r3, [r0, #16]
 8002750:	e001      	b.n	8002756 <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8002752:	3a01      	subs	r2, #1
 8002754:	d005      	beq.n	8002762 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002756:	6903      	ldr	r3, [r0, #16]
 8002758:	f013 0301 	ands.w	r3, r3, #1
 800275c:	d1f9      	bne.n	8002752 <USB_CoreReset+0x1a>

  return HAL_OK;
 800275e:	4618      	mov	r0, r3
}
 8002760:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	00030d40 	.word	0x00030d40

0800276c <USB_CoreInit>:
{
 800276c:	b084      	sub	sp, #16
 800276e:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8002772:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002774:	2d01      	cmp	r5, #1
{
 8002776:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800277a:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800277c:	d122      	bne.n	80027c4 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800277e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8002780:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002788:	68c3      	ldr	r3, [r0, #12]
 800278a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800278e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002792:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002794:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002796:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002798:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800279c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800279e:	d023      	beq.n	80027e8 <USB_CoreInit+0x7c>
    ret = USB_CoreReset(USBx);
 80027a0:	4608      	mov	r0, r1
 80027a2:	f7ff ffc9 	bl	8002738 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80027a6:	9b08      	ldr	r3, [sp, #32]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <USB_CoreInit+0x50>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80027ac:	688b      	ldr	r3, [r1, #8]
 80027ae:	f043 0306 	orr.w	r3, r3, #6
 80027b2:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027b4:	688b      	ldr	r3, [r1, #8]
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	608b      	str	r3, [r1, #8]
}
 80027bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027c0:	b004      	add	sp, #16
 80027c2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027c4:	68c3      	ldr	r3, [r0, #12]
 80027c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ca:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80027cc:	f7ff ffb4 	bl	8002738 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80027d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027d2:	b923      	cbnz	r3, 80027de <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027d4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	638b      	str	r3, [r1, #56]	; 0x38
 80027dc:	e7e3      	b.n	80027a6 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027de:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e4:	638b      	str	r3, [r1, #56]	; 0x38
 80027e6:	e7de      	b.n	80027a6 <USB_CoreInit+0x3a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80027e8:	68c3      	ldr	r3, [r0, #12]
 80027ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ee:	60c3      	str	r3, [r0, #12]
 80027f0:	e7d6      	b.n	80027a0 <USB_CoreInit+0x34>
 80027f2:	bf00      	nop

080027f4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80027f4:	2a02      	cmp	r2, #2
 80027f6:	d00a      	beq.n	800280e <USB_SetTurnaroundTime+0x1a>
 80027f8:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80027fc:	68c2      	ldr	r2, [r0, #12]
 80027fe:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002802:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002804:	68c3      	ldr	r3, [r0, #12]
 8002806:	430b      	orrs	r3, r1
 8002808:	60c3      	str	r3, [r0, #12]
}
 800280a:	2000      	movs	r0, #0
 800280c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <USB_SetTurnaroundTime+0xd0>)
 8002810:	4a2d      	ldr	r2, [pc, #180]	; (80028c8 <USB_SetTurnaroundTime+0xd4>)
 8002812:	440b      	add	r3, r1
 8002814:	4293      	cmp	r3, r2
 8002816:	d943      	bls.n	80028a0 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002818:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <USB_SetTurnaroundTime+0xd8>)
 800281a:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <USB_SetTurnaroundTime+0xdc>)
 800281c:	440b      	add	r3, r1
 800281e:	4293      	cmp	r3, r2
 8002820:	d93b      	bls.n	800289a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002822:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002826:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <USB_SetTurnaroundTime+0xe0>)
 8002828:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800282c:	4293      	cmp	r3, r2
 800282e:	d93a      	bls.n	80028a6 <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002830:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002834:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8002838:	32a0      	adds	r2, #160	; 0xa0
 800283a:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800283e:	4293      	cmp	r3, r2
 8002840:	d934      	bls.n	80028ac <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002842:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <USB_SetTurnaroundTime+0xe4>)
 8002844:	4a25      	ldr	r2, [pc, #148]	; (80028dc <USB_SetTurnaroundTime+0xe8>)
 8002846:	440b      	add	r3, r1
 8002848:	4293      	cmp	r3, r2
 800284a:	d932      	bls.n	80028b2 <USB_SetTurnaroundTime+0xbe>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <USB_SetTurnaroundTime+0xec>)
 800284e:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8002852:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8002856:	440b      	add	r3, r1
 8002858:	4293      	cmp	r3, r2
 800285a:	d92d      	bls.n	80028b8 <USB_SetTurnaroundTime+0xc4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <USB_SetTurnaroundTime+0xf0>)
 800285e:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8002862:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8002866:	440b      	add	r3, r1
 8002868:	4293      	cmp	r3, r2
 800286a:	d9c5      	bls.n	80027f8 <USB_SetTurnaroundTime+0x4>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800286c:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002870:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8002874:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8002878:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800287c:	4293      	cmp	r3, r2
 800287e:	d91e      	bls.n	80028be <USB_SetTurnaroundTime+0xca>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <USB_SetTurnaroundTime+0xf4>)
 8002882:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8002886:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800288a:	440b      	add	r3, r1
 800288c:	4293      	cmp	r3, r2
 800288e:	bf8c      	ite	hi
 8002890:	f44f 51c0 	movhi.w	r1, #6144	; 0x1800
 8002894:	f44f 51e0 	movls.w	r1, #7168	; 0x1c00
 8002898:	e7b0      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 800289a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800289e:	e7ad      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028a0:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80028a4:	e7aa      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028a6:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80028aa:	e7a7      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80028b0:	e7a4      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028b2:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80028b6:	e7a1      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028b8:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80028bc:	e79e      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c2:	e79b      	b.n	80027fc <USB_SetTurnaroundTime+0x8>
 80028c4:	ff275340 	.word	0xff275340
 80028c8:	000c34ff 	.word	0x000c34ff
 80028cc:	ff1b1e40 	.word	0xff1b1e40
 80028d0:	000f423f 	.word	0x000f423f
 80028d4:	00124f7f 	.word	0x00124f7f
 80028d8:	fee5b660 	.word	0xfee5b660
 80028dc:	0016e35f 	.word	0x0016e35f
 80028e0:	feced300 	.word	0xfeced300
 80028e4:	feb35bc0 	.word	0xfeb35bc0
 80028e8:	fe5954e0 	.word	0xfe5954e0

080028ec <USB_EnableGlobalInt>:
{
 80028ec:	4602      	mov	r2, r0
}
 80028ee:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028f0:	6893      	ldr	r3, [r2, #8]
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6093      	str	r3, [r2, #8]
}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <USB_DisableGlobalInt>:
{
 80028fc:	4602      	mov	r2, r0
}
 80028fe:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002900:	6893      	ldr	r3, [r2, #8]
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6093      	str	r3, [r2, #8]
}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <USB_SetCurrentMode>:
{
 800290c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800290e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002910:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002912:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002916:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002918:	d00b      	beq.n	8002932 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800291a:	b941      	cbnz	r1, 800292e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800291c:	68c3      	ldr	r3, [r0, #12]
 800291e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002922:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002924:	2032      	movs	r0, #50	; 0x32
 8002926:	f7fe f911 	bl	8000b4c <HAL_Delay>
  return HAL_OK;
 800292a:	2000      	movs	r0, #0
}
 800292c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800292e:	2001      	movs	r0, #1
}
 8002930:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002932:	68c3      	ldr	r3, [r0, #12]
 8002934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002938:	60c3      	str	r3, [r0, #12]
 800293a:	e7f3      	b.n	8002924 <USB_SetCurrentMode+0x18>

0800293c <USB_DevInit>:
{
 800293c:	b084      	sub	sp, #16
 800293e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002942:	ac09      	add	r4, sp, #36	; 0x24
 8002944:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800294c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
{
 800294e:	4602      	mov	r2, r0
 8002950:	460e      	mov	r6, r1
    USBx->DIEPTXF[i] = 0U;
 8002952:	4618      	mov	r0, r3
 8002954:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002958:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for (i = 0U; i < 15U; i++)
 800295c:	3301      	adds	r3, #1
 800295e:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002960:	6048      	str	r0, [r1, #4]
  for (i = 0U; i < 15U; i++)
 8002962:	d1f7      	bne.n	8002954 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8002964:	2c00      	cmp	r4, #0
 8002966:	f040 809e 	bne.w	8002aa6 <USB_DevInit+0x16a>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800296a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800296c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002970:	6393      	str	r3, [r2, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002972:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002974:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002978:	6393      	str	r3, [r2, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800297a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800297c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002980:	6393      	str	r3, [r2, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800298a:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
 800298e:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002992:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002994:	f502 6700 	add.w	r7, r2, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002998:	f000 808e 	beq.w	8002ab8 <USB_DevInit+0x17c>
  USBx_DEVICE->DCFG |= speed;
 800299c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80029a0:	f043 0303 	orr.w	r3, r3, #3
 80029a4:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80029a8:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80029ac:	6113      	str	r3, [r2, #16]
 80029ae:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <USB_DevInit+0x1c8>)
 80029b0:	e002      	b.n	80029b8 <USB_DevInit+0x7c>
    if (++count > 200000U)
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f000 809c 	beq.w	8002af0 <USB_DevInit+0x1b4>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80029b8:	6910      	ldr	r0, [r2, #16]
 80029ba:	f010 0020 	ands.w	r0, r0, #32
 80029be:	d1f8      	bne.n	80029b2 <USB_DevInit+0x76>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80029c0:	2310      	movs	r3, #16
 80029c2:	6113      	str	r3, [r2, #16]
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <USB_DevInit+0x1c8>)
 80029c6:	e002      	b.n	80029ce <USB_DevInit+0x92>
    if (++count > 200000U)
 80029c8:	3b01      	subs	r3, #1
 80029ca:	f000 8093 	beq.w	8002af4 <USB_DevInit+0x1b8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80029ce:	6911      	ldr	r1, [r2, #16]
 80029d0:	06c9      	lsls	r1, r1, #27
 80029d2:	d4f9      	bmi.n	80029c8 <USB_DevInit+0x8c>
  USBx_DEVICE->DIEPMSK = 0U;
 80029d4:	2100      	movs	r1, #0
 80029d6:	6139      	str	r1, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80029d8:	6179      	str	r1, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80029da:	61f9      	str	r1, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029dc:	b1f6      	cbz	r6, 8002a1c <USB_DevInit+0xe0>
      USBx_INEP(i)->DIEPCTL = 0U;
 80029de:	468e      	mov	lr, r1
 80029e0:	f502 6310 	add.w	r3, r2, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80029e4:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80029e8:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80029ec:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 80029f0:	e00a      	b.n	8002a08 <USB_DevInit+0xcc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80029f2:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80029f6:	3101      	adds	r1, #1
 80029f8:	42b1      	cmp	r1, r6
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80029fa:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80029fe:	f8c3 8008 	str.w	r8, [r3, #8]
 8002a02:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a06:	d02f      	beq.n	8002a68 <USB_DevInit+0x12c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a08:	f8d3 c000 	ldr.w	ip, [r3]
 8002a0c:	f1bc 0f00 	cmp.w	ip, #0
 8002a10:	daef      	bge.n	80029f2 <USB_DevInit+0xb6>
      if (i == 0U)
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d073      	beq.n	8002afe <USB_DevInit+0x1c2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a16:	f8c3 9000 	str.w	r9, [r3]
 8002a1a:	e7ec      	b.n	80029f6 <USB_DevInit+0xba>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002a1c:	693b      	ldr	r3, [r7, #16]
  if (cfg.dma_enable == 1U)
 8002a1e:	2d01      	cmp	r5, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a24:	613b      	str	r3, [r7, #16]
  if (cfg.dma_enable == 1U)
 8002a26:	d04e      	beq.n	8002ac6 <USB_DevInit+0x18a>
  USBx->GINTMSK = 0U;
 8002a28:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002a2a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8002a2e:	6191      	str	r1, [r2, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002a30:	6153      	str	r3, [r2, #20]
  if (cfg.dma_enable == 0U)
 8002a32:	b91d      	cbnz	r5, 8002a3c <USB_DevInit+0x100>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002a34:	6993      	ldr	r3, [r2, #24]
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	6193      	str	r3, [r2, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002a3c:	6995      	ldr	r5, [r2, #24]
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <USB_DevInit+0x1cc>)
  if (cfg.Sof_enable != 0U)
 8002a40:	990f      	ldr	r1, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002a42:	432b      	orrs	r3, r5
 8002a44:	6193      	str	r3, [r2, #24]
  if (cfg.Sof_enable != 0U)
 8002a46:	b119      	cbz	r1, 8002a50 <USB_DevInit+0x114>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002a48:	6993      	ldr	r3, [r2, #24]
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6193      	str	r3, [r2, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002a50:	2c01      	cmp	r4, #1
 8002a52:	d105      	bne.n	8002a60 <USB_DevInit+0x124>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002a54:	6993      	ldr	r3, [r2, #24]
 8002a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6193      	str	r3, [r2, #24]
}
 8002a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	b004      	add	sp, #16
 8002a66:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a68:	2600      	movs	r6, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a6a:	46b6      	mov	lr, r6
 8002a6c:	f502 6330 	add.w	r3, r2, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a70:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a74:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a78:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002a7c:	e00a      	b.n	8002a94 <USB_DevInit+0x158>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a7e:	f8c3 e000 	str.w	lr, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a82:	3601      	adds	r6, #1
 8002a84:	428e      	cmp	r6, r1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002a86:	f8c3 e010 	str.w	lr, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a8a:	f8c3 8008 	str.w	r8, [r3, #8]
 8002a8e:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a92:	d0c3      	beq.n	8002a1c <USB_DevInit+0xe0>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002a94:	f8d3 c000 	ldr.w	ip, [r3]
 8002a98:	f1bc 0f00 	cmp.w	ip, #0
 8002a9c:	daef      	bge.n	8002a7e <USB_DevInit+0x142>
      if (i == 0U)
 8002a9e:	b35e      	cbz	r6, 8002af8 <USB_DevInit+0x1bc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002aa0:	f8c3 9000 	str.w	r9, [r3]
 8002aa4:	e7ed      	b.n	8002a82 <USB_DevInit+0x146>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aac:	6013      	str	r3, [r2, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002aae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ab4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ab6:	e764      	b.n	8002982 <USB_DevInit+0x46>
    if (cfg.speed == USBD_HS_SPEED)
 8002ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002aba:	b993      	cbnz	r3, 8002ae2 <USB_DevInit+0x1a6>
  USBx_DEVICE->DCFG |= speed;
 8002abc:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8002ac0:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8002ac4:	e770      	b.n	80029a8 <USB_DevInit+0x6c>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <USB_DevInit+0x1d0>)
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	f043 0303 	orr.w	r3, r3, #3
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8002ad6:	2100      	movs	r1, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ad8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 8002adc:	6191      	str	r1, [r2, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ade:	6153      	str	r3, [r2, #20]
 8002ae0:	e7ac      	b.n	8002a3c <USB_DevInit+0x100>
  USBx_DEVICE->DCFG |= speed;
 8002ae2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8002aee:	e75b      	b.n	80029a8 <USB_DevInit+0x6c>
    ret = HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
 8002af2:	e765      	b.n	80029c0 <USB_DevInit+0x84>
    ret = HAL_ERROR;
 8002af4:	2001      	movs	r0, #1
 8002af6:	e76d      	b.n	80029d4 <USB_DevInit+0x98>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002af8:	f8c3 a000 	str.w	sl, [r3]
 8002afc:	e7c1      	b.n	8002a82 <USB_DevInit+0x146>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002afe:	f8c3 a000 	str.w	sl, [r3]
 8002b02:	e778      	b.n	80029f6 <USB_DevInit+0xba>
 8002b04:	00030d40 	.word	0x00030d40
 8002b08:	803c3800 	.word	0x803c3800
 8002b0c:	00800100 	.word	0x00800100

08002b10 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002b10:	0189      	lsls	r1, r1, #6
 8002b12:	f041 0120 	orr.w	r1, r1, #32
 8002b16:	6101      	str	r1, [r0, #16]
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <USB_FlushTxFifo+0x20>)
 8002b1a:	e001      	b.n	8002b20 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	d005      	beq.n	8002b2c <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002b20:	6903      	ldr	r3, [r0, #16]
 8002b22:	f013 0320 	ands.w	r3, r3, #32
 8002b26:	d1f9      	bne.n	8002b1c <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b2c:	2003      	movs	r0, #3
}
 8002b2e:	4770      	bx	lr
 8002b30:	00030d40 	.word	0x00030d40

08002b34 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002b34:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002b38:	f013 0006 	ands.w	r0, r3, #6
 8002b3c:	d004      	beq.n	8002b48 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002b3e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8002b42:	bf14      	ite	ne
 8002b44:	2002      	movne	r0, #2
 8002b46:	200f      	moveq	r0, #15
}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop

08002b4c <USB_ActivateEndpoint>:
{
 8002b4c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002b4e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002b50:	784d      	ldrb	r5, [r1, #1]
 8002b52:	f002 040f 	and.w	r4, r2, #15
 8002b56:	2301      	movs	r3, #1
 8002b58:	2d01      	cmp	r5, #1
 8002b5a:	fa03 f304 	lsl.w	r3, r3, r4
 8002b5e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
 8002b62:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002b66:	d019      	beq.n	8002b9c <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002b68:	69c2      	ldr	r2, [r0, #28]
 8002b6a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002b6e:	61c3      	str	r3, [r0, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002b70:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	d40e      	bmi.n	8002b96 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002b78:	688a      	ldr	r2, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8002b7a:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002b7c:	f8d4 1b00 	ldr.w	r1, [r4, #2816]	; 0xb00
 8002b80:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002b84:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8002b90:	430b      	orrs	r3, r1
 8002b92:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8002b96:	2000      	movs	r0, #0
 8002b98:	bc30      	pop	{r4, r5}
 8002b9a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002b9c:	69c5      	ldr	r5, [r0, #28]
 8002b9e:	432b      	orrs	r3, r5
 8002ba0:	61c3      	str	r3, [r0, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002ba2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002ba6:	0418      	lsls	r0, r3, #16
 8002ba8:	d4f5      	bmi.n	8002b96 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002baa:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002bac:	78c8      	ldrb	r0, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002bae:	f8d4 1900 	ldr.w	r1, [r4, #2304]	; 0x900
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8002bc2:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
}
 8002bcc:	2000      	movs	r0, #0
 8002bce:	bc30      	pop	{r4, r5}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop

08002bd4 <USB_DeactivateEndpoint>:
{
 8002bd4:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8002bd6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002bd8:	7849      	ldrb	r1, [r1, #1]
 8002bda:	f002 040f 	and.w	r4, r2, #15
 8002bde:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8002be2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002be6:	2301      	movs	r3, #1
 8002be8:	2901      	cmp	r1, #1
 8002bea:	fa03 f304 	lsl.w	r3, r3, r4
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002bee:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if (ep->is_in == 1U)
 8002bf0:	d010      	beq.n	8002c14 <USB_DeactivateEndpoint+0x40>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002bf2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002bf6:	401c      	ands	r4, r3
 8002bf8:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002bfa:	69c4      	ldr	r4, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002bfc:	490d      	ldr	r1, [pc, #52]	; (8002c34 <USB_DeactivateEndpoint+0x60>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002bfe:	4023      	ands	r3, r4
 8002c00:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002c02:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
}
 8002c06:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002c0a:	4019      	ands	r1, r3
}
 8002c0c:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002c0e:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 8002c12:	4770      	bx	lr
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c14:	43db      	mvns	r3, r3
 8002c16:	401c      	ands	r4, r3
 8002c18:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c1a:	69c4      	ldr	r4, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c1c:	4906      	ldr	r1, [pc, #24]	; (8002c38 <USB_DeactivateEndpoint+0x64>)
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002c1e:	4023      	ands	r3, r4
 8002c20:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c22:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
}
 8002c26:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c2a:	4019      	ands	r1, r3
}
 8002c2c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002c2e:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8002c32:	4770      	bx	lr
 8002c34:	eff37800 	.word	0xeff37800
 8002c38:	ec337800 	.word	0xec337800

08002c3c <USB_EPStartXfer>:
{
 8002c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (ep->is_in == 1U)
 8002c40:	784e      	ldrb	r6, [r1, #1]
 8002c42:	780b      	ldrb	r3, [r1, #0]
 8002c44:	694c      	ldr	r4, [r1, #20]
 8002c46:	78cf      	ldrb	r7, [r1, #3]
 8002c48:	2e01      	cmp	r6, #1
 8002c4a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002c4e:	d04e      	beq.n	8002cee <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c50:	f503 6530 	add.w	r5, r3, #2816	; 0xb00
 8002c54:	692e      	ldr	r6, [r5, #16]
 8002c56:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002c5a:	0cf6      	lsrs	r6, r6, #19
 8002c5c:	04f6      	lsls	r6, r6, #19
 8002c5e:	612e      	str	r6, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002c60:	692e      	ldr	r6, [r5, #16]
 8002c62:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002c66:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002c6a:	612e      	str	r6, [r5, #16]
    if (ep->xfer_len == 0U)
 8002c6c:	b37c      	cbz	r4, 8002cce <USB_EPStartXfer+0x92>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002c6e:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8002e3c <USB_EPStartXfer+0x200>
 8002c72:	f8d5 8010 	ldr.w	r8, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002c76:	eb04 060c 	add.w	r6, r4, ip
 8002c7a:	3e01      	subs	r6, #1
 8002c7c:	fbb6 f6fc 	udiv	r6, r6, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002c80:	ea0e 44c6 	and.w	r4, lr, r6, lsl #19
 8002c84:	ea44 0408 	orr.w	r4, r4, r8
 8002c88:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002c8a:	b2b6      	uxth	r6, r6
 8002c8c:	fb0c f406 	mul.w	r4, ip, r6
 8002c90:	692e      	ldr	r6, [r5, #16]
 8002c92:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8002c96:	4334      	orrs	r4, r6
    if (dma == 1U)
 8002c98:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002c9a:	612c      	str	r4, [r5, #16]
    if (dma == 1U)
 8002c9c:	d022      	beq.n	8002ce4 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8002c9e:	2f01      	cmp	r7, #1
 8002ca0:	d10c      	bne.n	8002cbc <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002ca2:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002ca6:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002caa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002cae:	bf0c      	ite	eq
 8002cb0:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002cb4:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8002cb8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002cbc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002cc0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002cc4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002cce:	692e      	ldr	r6, [r5, #16]
 8002cd0:	f3cc 0412 	ubfx	r4, ip, #0, #19
 8002cd4:	4334      	orrs	r4, r6
 8002cd6:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002cd8:	692c      	ldr	r4, [r5, #16]
    if (dma == 1U)
 8002cda:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002cdc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002ce0:	612c      	str	r4, [r5, #16]
    if (dma == 1U)
 8002ce2:	d1dc      	bne.n	8002c9e <USB_EPStartXfer+0x62>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002ce4:	68ca      	ldr	r2, [r1, #12]
 8002ce6:	2a00      	cmp	r2, #0
 8002ce8:	d0d9      	beq.n	8002c9e <USB_EPStartXfer+0x62>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002cea:	616a      	str	r2, [r5, #20]
 8002cec:	e7d7      	b.n	8002c9e <USB_EPStartXfer+0x62>
 8002cee:	f503 6510 	add.w	r5, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8002cf2:	b3ec      	cbz	r4, 8002d70 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002cf4:	f8d5 e010 	ldr.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002cf8:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8002cfc:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8002e3c <USB_EPStartXfer+0x200>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d00:	ea4f 4ede 	mov.w	lr, lr, lsr #19
 8002d04:	ea4f 4ece 	mov.w	lr, lr, lsl #19
 8002d08:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002d0c:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8002d10:	f028 58ff 	bic.w	r8, r8, #534773760	; 0x1fe00000
 8002d14:	f428 18c0 	bic.w	r8, r8, #1572864	; 0x180000
 8002d18:	f8c5 8010 	str.w	r8, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002d1c:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8002d20:	eb09 0e04 	add.w	lr, r9, r4
 8002d24:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002d28:	fbbe fef9 	udiv	lr, lr, r9
 8002d2c:	ea0c 4cce 	and.w	ip, ip, lr, lsl #19
 8002d30:	ea4c 0c08 	orr.w	ip, ip, r8
 8002d34:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002d38:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8002d3c:	f3c4 0c12 	ubfx	ip, r4, #0, #19
 8002d40:	ea4c 0c0e 	orr.w	ip, ip, lr
      if (ep->type == EP_TYPE_ISOC)
 8002d44:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002d46:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8002d4a:	d04a      	beq.n	8002de2 <USB_EPStartXfer+0x1a6>
    if (dma == 1U)
 8002d4c:	2a01      	cmp	r2, #1
 8002d4e:	d052      	beq.n	8002df6 <USB_EPStartXfer+0x1ba>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d50:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002d54:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002d58:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002d5c:	780b      	ldrb	r3, [r1, #0]
 8002d5e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	409e      	lsls	r6, r3
 8002d68:	4316      	orrs	r6, r2
 8002d6a:	f8c0 6834 	str.w	r6, [r0, #2100]	; 0x834
 8002d6e:	e7ab      	b.n	8002cc8 <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002d70:	692e      	ldr	r6, [r5, #16]
 8002d72:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002d76:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002d7a:	612e      	str	r6, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002d7c:	692e      	ldr	r6, [r5, #16]
 8002d7e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8002d82:	612e      	str	r6, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d84:	692e      	ldr	r6, [r5, #16]
 8002d86:	0cf6      	lsrs	r6, r6, #19
 8002d88:	04f6      	lsls	r6, r6, #19
    if (dma == 1U)
 8002d8a:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002d8c:	612e      	str	r6, [r5, #16]
    if (dma == 1U)
 8002d8e:	d032      	beq.n	8002df6 <USB_EPStartXfer+0x1ba>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d90:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002d94:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d96:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002d9a:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002d9e:	d193      	bne.n	8002cc8 <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002da0:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8002da4:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002da8:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 8002dac:	bf0c      	ite	eq
 8002dae:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002db2:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002db6:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
  if (dma == 0U)
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d184      	bne.n	8002cc8 <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002dbe:	b2a2      	uxth	r2, r4
 8002dc0:	3203      	adds	r2, #3
    for (i = 0U; i < count32b; i++)
 8002dc2:	0892      	lsrs	r2, r2, #2
 8002dc4:	d080      	beq.n	8002cc8 <USB_EPStartXfer+0x8c>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002dc6:	780c      	ldrb	r4, [r1, #0]
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002dc8:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002dca:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8002dce:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002dd2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002dd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8002dda:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d1fa      	bne.n	8002dd6 <USB_EPStartXfer+0x19a>
 8002de0:	e772      	b.n	8002cc8 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002de2:	692e      	ldr	r6, [r5, #16]
 8002de4:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8002de8:	612e      	str	r6, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002dea:	692e      	ldr	r6, [r5, #16]
    if (dma == 1U)
 8002dec:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002dee:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002df2:	612e      	str	r6, [r5, #16]
    if (dma == 1U)
 8002df4:	d11a      	bne.n	8002e2c <USB_EPStartXfer+0x1f0>
      if ((uint32_t)ep->dma_addr != 0U)
 8002df6:	690a      	ldr	r2, [r1, #16]
 8002df8:	b102      	cbz	r2, 8002dfc <USB_EPStartXfer+0x1c0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002dfa:	616a      	str	r2, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 8002dfc:	2f01      	cmp	r7, #1
 8002dfe:	d10c      	bne.n	8002e1a <USB_EPStartXfer+0x1de>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002e00:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002e04:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002e08:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002e0c:	bf0c      	ite	eq
 8002e0e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002e12:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8002e16:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002e1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002e1e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002e22:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8002e26:	2000      	movs	r0, #0
 8002e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002e2c:	f8d3 5900 	ldr.w	r5, [r3, #2304]	; 0x900
 8002e30:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002e34:	f8c3 5900 	str.w	r5, [r3, #2304]	; 0x900
 8002e38:	e7b2      	b.n	8002da0 <USB_EPStartXfer+0x164>
 8002e3a:	bf00      	nop
 8002e3c:	1ff80000 	.word	0x1ff80000

08002e40 <USB_EP0StartXfer>:
{
 8002e40:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8002e42:	784b      	ldrb	r3, [r1, #1]
 8002e44:	780c      	ldrb	r4, [r1, #0]
 8002e46:	694e      	ldr	r6, [r1, #20]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002e4e:	d027      	beq.n	8002ea0 <USB_EP0StartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e50:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002e54:	691d      	ldr	r5, [r3, #16]
 8002e56:	6888      	ldr	r0, [r1, #8]
 8002e58:	0ced      	lsrs	r5, r5, #19
 8002e5a:	04ed      	lsls	r5, r5, #19
 8002e5c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002e5e:	691d      	ldr	r5, [r3, #16]
 8002e60:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002e64:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002e68:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 8002e6a:	b106      	cbz	r6, 8002e6e <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8002e6c:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002e6e:	691d      	ldr	r5, [r3, #16]
 8002e70:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002e74:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002e76:	691d      	ldr	r5, [r3, #16]
 8002e78:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8002e7c:	4328      	orrs	r0, r5
    if (dma == 1U)
 8002e7e:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002e80:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8002e82:	d008      	beq.n	8002e96 <USB_EP0StartXfer+0x56>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002e84:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002e88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002e8c:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8002e90:	2000      	movs	r0, #0
 8002e92:	bcf0      	pop	{r4, r5, r6, r7}
 8002e94:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8002e96:	68ca      	ldr	r2, [r1, #12]
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	d0f3      	beq.n	8002e84 <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002e9c:	615a      	str	r2, [r3, #20]
 8002e9e:	e7f1      	b.n	8002e84 <USB_EP0StartXfer+0x44>
 8002ea0:	f504 6310 	add.w	r3, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ea4:	691d      	ldr	r5, [r3, #16]
    if (ep->xfer_len == 0U)
 8002ea6:	b37e      	cbz	r6, 8002f08 <USB_EP0StartXfer+0xc8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ea8:	0ced      	lsrs	r5, r5, #19
 8002eaa:	04ed      	lsls	r5, r5, #19
      if (ep->xfer_len > ep->maxpacket)
 8002eac:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002eae:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002eb0:	691d      	ldr	r5, [r3, #16]
 8002eb2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002eb6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002eba:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ebc:	691d      	ldr	r5, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002ebe:	42b7      	cmp	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ec0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8002ec4:	bf38      	it	cc
 8002ec6:	614f      	strcc	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ec8:	611d      	str	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8002eca:	bf38      	it	cc
 8002ecc:	463e      	movcc	r6, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002ece:	691d      	ldr	r5, [r3, #16]
 8002ed0:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002ed4:	432e      	orrs	r6, r5
    if (dma == 1U)
 8002ed6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002ed8:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8002eda:	d024      	beq.n	8002f26 <USB_EP0StartXfer+0xe6>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002edc:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002ee0:	694a      	ldr	r2, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002ee2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002ee6:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	d0d0      	beq.n	8002e90 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002eee:	780b      	ldrb	r3, [r1, #0]
 8002ef0:	f8d0 1834 	ldr.w	r1, [r0, #2100]	; 0x834
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4093      	lsls	r3, r2
 8002efc:	430b      	orrs	r3, r1
 8002efe:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 8002f02:	bcf0      	pop	{r4, r5, r6, r7}
 8002f04:	2000      	movs	r0, #0
 8002f06:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002f08:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002f0c:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002f10:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002f12:	691d      	ldr	r5, [r3, #16]
 8002f14:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002f18:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f1a:	691d      	ldr	r5, [r3, #16]
 8002f1c:	0ced      	lsrs	r5, r5, #19
 8002f1e:	04ed      	lsls	r5, r5, #19
    if (dma == 1U)
 8002f20:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002f22:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8002f24:	d1da      	bne.n	8002edc <USB_EP0StartXfer+0x9c>
      if ((uint32_t)ep->dma_addr != 0U)
 8002f26:	690a      	ldr	r2, [r1, #16]
 8002f28:	b102      	cbz	r2, 8002f2c <USB_EP0StartXfer+0xec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002f2a:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002f2c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002f30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002f34:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8002f38:	2000      	movs	r0, #0
 8002f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <USB_WritePacket>:
{
 8002f40:	b410      	push	{r4}
 8002f42:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8002f46:	b96c      	cbnz	r4, 8002f64 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002f48:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	d00a      	beq.n	8002f64 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002f4e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002f52:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002f56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002f5a:	f851 2b04 	ldr.w	r2, [r1], #4
 8002f5e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8002f60:	428b      	cmp	r3, r1
 8002f62:	d1fa      	bne.n	8002f5a <USB_WritePacket+0x1a>
}
 8002f64:	2000      	movs	r0, #0
 8002f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002f6c:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8002f6e:	0892      	lsrs	r2, r2, #2
 8002f70:	d00c      	beq.n	8002f8c <USB_ReadPacket+0x20>
{
 8002f72:	b410      	push	{r4}
 8002f74:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002f78:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002f82:	4281      	cmp	r1, r0
 8002f84:	d1fa      	bne.n	8002f7c <USB_ReadPacket+0x10>
}
 8002f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f8a:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8002f8c:	4608      	mov	r0, r1
}
 8002f8e:	4770      	bx	lr

08002f90 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002f90:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002f92:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002f94:	2a01      	cmp	r2, #1
 8002f96:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002f9a:	d012      	beq.n	8002fc2 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002f9c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002fa0:	2a00      	cmp	r2, #0
 8002fa2:	db06      	blt.n	8002fb2 <USB_EPSetStall+0x22>
 8002fa4:	b12b      	cbz	r3, 8002fb2 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002fa6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fae:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002fb2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002fc2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002fc6:	2a00      	cmp	r2, #0
 8002fc8:	db06      	blt.n	8002fd8 <USB_EPSetStall+0x48>
 8002fca:	b12b      	cbz	r3, 8002fd8 <USB_EPSetStall+0x48>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002fcc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002fd8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fe0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	4770      	bx	lr

08002fe8 <USB_EPClearStall>:
{
 8002fe8:	78cb      	ldrb	r3, [r1, #3]
 8002fea:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8002fec:	7849      	ldrb	r1, [r1, #1]
 8002fee:	3b02      	subs	r3, #2
 8002ff0:	2901      	cmp	r1, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8002ff8:	d011      	beq.n	800301e <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ffa:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ffe:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003000:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003004:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003008:	d901      	bls.n	800300e <USB_EPClearStall+0x26>
}
 800300a:	2000      	movs	r0, #0
 800300c:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800300e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800301a:	2000      	movs	r0, #0
 800301c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800301e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003022:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003024:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003028:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800302c:	d8ed      	bhi.n	800300a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800302e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800303a:	2000      	movs	r0, #0
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003040:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003044:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003048:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800304c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003050:	0109      	lsls	r1, r1, #4
 8003052:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003056:	4319      	orrs	r1, r3
 8003058:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800305c:	2000      	movs	r0, #0
 800305e:	4770      	bx	lr

08003060 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003060:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 8003064:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003066:	6853      	ldr	r3, [r2, #4]
 8003068:	f023 0302 	bic.w	r3, r3, #2
  HAL_Delay(3U);
 800306c:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800306e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003070:	f7fd fd6c 	bl	8000b4c <HAL_Delay>
}
 8003074:	2000      	movs	r0, #0
 8003076:	bd08      	pop	{r3, pc}

08003078 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003078:	f500 6200 	add.w	r2, r0, #2048	; 0x800
{
 800307c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800307e:	6853      	ldr	r3, [r2, #4]
 8003080:	f043 0302 	orr.w	r3, r3, #2
  HAL_Delay(3U);
 8003084:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003086:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003088:	f7fd fd60 	bl	8000b4c <HAL_Delay>
}
 800308c:	2000      	movs	r0, #0
 800308e:	bd08      	pop	{r3, pc}

08003090 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003090:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003092:	6980      	ldr	r0, [r0, #24]
}
 8003094:	4010      	ands	r0, r2
 8003096:	4770      	bx	lr

08003098 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003098:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800309c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80030a0:	69c0      	ldr	r0, [r0, #28]
 80030a2:	4018      	ands	r0, r3
}
 80030a4:	0c00      	lsrs	r0, r0, #16
 80030a6:	4770      	bx	lr

080030a8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80030a8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80030ac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80030b0:	69c0      	ldr	r0, [r0, #28]
 80030b2:	4018      	ands	r0, r3
}
 80030b4:	b280      	uxth	r0, r0
 80030b6:	4770      	bx	lr

080030b8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80030b8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80030bc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80030c0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80030c4:	6940      	ldr	r0, [r0, #20]
}
 80030c6:	4010      	ands	r0, r2
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <USB_ReadDevInEPInterrupt>:
{
 80030cc:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80030ce:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80030d2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80030d6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80030da:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80030de:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80030e2:	40cb      	lsrs	r3, r1
 80030e4:	01db      	lsls	r3, r3, #7
 80030e6:	b2db      	uxtb	r3, r3
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80030e8:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80030ea:	4323      	orrs	r3, r4
}
 80030ec:	4018      	ands	r0, r3
 80030ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80030f4:	6940      	ldr	r0, [r0, #20]
}
 80030f6:	f000 0001 	and.w	r0, r0, #1
 80030fa:	4770      	bx	lr

080030fc <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80030fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003100:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003104:	f023 0307 	bic.w	r3, r3, #7
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003108:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800310c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003110:	6893      	ldr	r3, [r2, #8]
 8003112:	f003 0306 	and.w	r3, r3, #6
 8003116:	2b04      	cmp	r3, #4
 8003118:	d105      	bne.n	8003126 <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800311a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800311e:	f043 0303 	orr.w	r3, r3, #3
 8003122:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003126:	6853      	ldr	r3, [r2, #4]
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6053      	str	r3, [r2, #4]
}
 800312e:	2000      	movs	r0, #0
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <USB_EP0_OutStart>:
{
 8003134:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003136:	4c12      	ldr	r4, [pc, #72]	; (8003180 <USB_EP0_OutStart+0x4c>)
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003138:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800313a:	42a5      	cmp	r5, r4
 800313c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003140:	d903      	bls.n	800314a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003142:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8003146:	2c00      	cmp	r4, #0
 8003148:	db16      	blt.n	8003178 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800314a:	2400      	movs	r4, #0
 800314c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800314e:	691c      	ldr	r4, [r3, #16]
 8003150:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003154:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003156:	691c      	ldr	r4, [r3, #16]
 8003158:	f044 0418 	orr.w	r4, r4, #24
 800315c:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800315e:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8003160:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003162:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003166:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8003168:	d106      	bne.n	8003178 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800316a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800316c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003170:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003174:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8003178:	2000      	movs	r0, #0
 800317a:	bc30      	pop	{r4, r5}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	4f54300a 	.word	0x4f54300a

08003184 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgFSDesc);
 8003184:	2322      	movs	r3, #34	; 0x22
 8003186:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
}
 8003188:	4800      	ldr	r0, [pc, #0]	; (800318c <USBD_HID_GetFSCfgDesc+0x8>)
 800318a:	4770      	bx	lr
 800318c:	20000090 	.word	0x20000090

08003190 <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgHSDesc);
 8003190:	2322      	movs	r3, #34	; 0x22
 8003192:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
}
 8003194:	4800      	ldr	r0, [pc, #0]	; (8003198 <USBD_HID_GetHSCfgDesc+0x8>)
 8003196:	4770      	bx	lr
 8003198:	200000b4 	.word	0x200000b4

0800319c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_OtherSpeedCfgDesc);
 800319c:	2322      	movs	r3, #34	; 0x22
 800319e:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
}
 80031a0:	4800      	ldr	r0, [pc, #0]	; (80031a4 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 80031a2:	4770      	bx	lr
 80031a4:	200000f0 	.word	0x200000f0

080031a8 <USBD_HID_DataIn>:
                              uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80031a8:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 80031ac:	2000      	movs	r0, #0
 80031ae:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop

080031b4 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 80031b4:	230a      	movs	r3, #10
 80031b6:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 80031b8:	4800      	ldr	r0, [pc, #0]	; (80031bc <USBD_HID_GetDeviceQualifierDesc+0x8>)
 80031ba:	4770      	bx	lr
 80031bc:	200000e4 	.word	0x200000e4

080031c0 <USBD_HID_Setup>:
{
 80031c0:	b510      	push	{r4, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031c2:	780b      	ldrb	r3, [r1, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80031c4:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
{
 80031c8:	b082      	sub	sp, #8
  uint16_t status_info = 0U;
 80031ca:	2200      	movs	r2, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031cc:	f013 0360 	ands.w	r3, r3, #96	; 0x60
  uint16_t status_info = 0U;
 80031d0:	f8ad 2006 	strh.w	r2, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80031d4:	d022      	beq.n	800321c <USBD_HID_Setup+0x5c>
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d004      	beq.n	80031e4 <USBD_HID_Setup+0x24>
        USBD_CtlError (pdev, req);
 80031da:	f000 fc7b 	bl	8003ad4 <USBD_CtlError>
			  ret = USBD_FAIL;
 80031de:	2002      	movs	r0, #2
}
 80031e0:	b002      	add	sp, #8
 80031e2:	bd10      	pop	{r4, pc}
    switch (req->bRequest)
 80031e4:	784b      	ldrb	r3, [r1, #1]
 80031e6:	3b02      	subs	r3, #2
 80031e8:	2b09      	cmp	r3, #9
 80031ea:	d8f6      	bhi.n	80031da <USBD_HID_Setup+0x1a>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <USBD_HID_Setup+0x34>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	080032cb 	.word	0x080032cb
 80031f8:	080032bf 	.word	0x080032bf
 80031fc:	080031db 	.word	0x080031db
 8003200:	080031db 	.word	0x080031db
 8003204:	080031db 	.word	0x080031db
 8003208:	080031db 	.word	0x080031db
 800320c:	080031db 	.word	0x080031db
 8003210:	080031db 	.word	0x080031db
 8003214:	080032b5 	.word	0x080032b5
 8003218:	080032ad 	.word	0x080032ad
    switch (req->bRequest)
 800321c:	784b      	ldrb	r3, [r1, #1]
 800321e:	2b0b      	cmp	r3, #11
 8003220:	d8db      	bhi.n	80031da <USBD_HID_Setup+0x1a>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <USBD_HID_Setup+0x68>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	08003297 	.word	0x08003297
 800322c:	080031db 	.word	0x080031db
 8003230:	080031db 	.word	0x080031db
 8003234:	080031db 	.word	0x080031db
 8003238:	080031db 	.word	0x080031db
 800323c:	080031db 	.word	0x080031db
 8003240:	08003279 	.word	0x08003279
 8003244:	080031db 	.word	0x080031db
 8003248:	080031db 	.word	0x080031db
 800324c:	080031db 	.word	0x080031db
 8003250:	08003269 	.word	0x08003269
 8003254:	08003259 	.word	0x08003259
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003258:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800325c:	2b03      	cmp	r3, #3
 800325e:	d1bc      	bne.n	80031da <USBD_HID_Setup+0x1a>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8003260:	788b      	ldrb	r3, [r1, #2]
 8003262:	60a3      	str	r3, [r4, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8003264:	2000      	movs	r0, #0
 8003266:	e7bb      	b.n	80031e0 <USBD_HID_Setup+0x20>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003268:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800326c:	2b03      	cmp	r3, #3
 800326e:	d1b4      	bne.n	80031da <USBD_HID_Setup+0x1a>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8003270:	f104 0108 	add.w	r1, r4, #8
 8003274:	2201      	movs	r2, #1
 8003276:	e00a      	b.n	800328e <USBD_HID_Setup+0xce>
      if(req->wValue >> 8 == HID_REPORT_DESC)
 8003278:	884b      	ldrh	r3, [r1, #2]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	2b22      	cmp	r3, #34	; 0x22
 800327e:	d02a      	beq.n	80032d6 <USBD_HID_Setup+0x116>
      else if(req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8003280:	2b21      	cmp	r3, #33	; 0x21
 8003282:	d1aa      	bne.n	80031da <USBD_HID_Setup+0x1a>
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8003284:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;
 8003286:	4917      	ldr	r1, [pc, #92]	; (80032e4 <USBD_HID_Setup+0x124>)
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8003288:	2a09      	cmp	r2, #9
 800328a:	bf28      	it	cs
 800328c:	2209      	movcs	r2, #9
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800328e:	f000 fc53 	bl	8003b38 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003292:	2000      	movs	r0, #0
 8003294:	e7a4      	b.n	80031e0 <USBD_HID_Setup+0x20>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003296:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800329a:	2b03      	cmp	r3, #3
 800329c:	d19d      	bne.n	80031da <USBD_HID_Setup+0x1a>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800329e:	2202      	movs	r2, #2
 80032a0:	f10d 0106 	add.w	r1, sp, #6
 80032a4:	f000 fc48 	bl	8003b38 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80032a8:	2000      	movs	r0, #0
 80032aa:	e799      	b.n	80031e0 <USBD_HID_Setup+0x20>
      hhid->Protocol = (uint8_t)(req->wValue);
 80032ac:	788b      	ldrb	r3, [r1, #2]
 80032ae:	6023      	str	r3, [r4, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80032b0:	2000      	movs	r0, #0
      break;
 80032b2:	e795      	b.n	80031e0 <USBD_HID_Setup+0x20>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80032b4:	884b      	ldrh	r3, [r1, #2]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	6063      	str	r3, [r4, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80032ba:	2000      	movs	r0, #0
      break;
 80032bc:	e790      	b.n	80031e0 <USBD_HID_Setup+0x20>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80032be:	4621      	mov	r1, r4
 80032c0:	2201      	movs	r2, #1
 80032c2:	f000 fc39 	bl	8003b38 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80032c6:	2000      	movs	r0, #0
      break;
 80032c8:	e78a      	b.n	80031e0 <USBD_HID_Setup+0x20>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80032ca:	1d21      	adds	r1, r4, #4
 80032cc:	2201      	movs	r2, #1
 80032ce:	f000 fc33 	bl	8003b38 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80032d2:	2000      	movs	r0, #0
      break;
 80032d4:	e784      	b.n	80031e0 <USBD_HID_Setup+0x20>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80032d6:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <USBD_HID_Setup+0x128>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 80032da:	2a4a      	cmp	r2, #74	; 0x4a
 80032dc:	bf28      	it	cs
 80032de:	224a      	movcs	r2, #74	; 0x4a
 80032e0:	e7d5      	b.n	800328e <USBD_HID_Setup+0xce>
 80032e2:	bf00      	nop
 80032e4:	200000d8 	.word	0x200000d8
 80032e8:	2000000c 	.word	0x2000000c

080032ec <USBD_HID_DeInit>:
{
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80032f0:	2181      	movs	r1, #129	; 0x81
 80032f2:	f000 fdf3 	bl	8003edc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80032f6:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80032fa:	2500      	movs	r5, #0
 80032fc:	62e5      	str	r5, [r4, #44]	; 0x2c
  if(pdev->pClassData != NULL)
 80032fe:	b118      	cbz	r0, 8003308 <USBD_HID_DeInit+0x1c>
    USBD_free(pdev->pClassData);
 8003300:	f000 fe86 	bl	8004010 <free>
    pdev->pClassData = NULL;
 8003304:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8003308:	2000      	movs	r0, #0
 800330a:	bd38      	pop	{r3, r4, r5, pc}

0800330c <USBD_HID_Init>:
{
 800330c:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800330e:	2304      	movs	r3, #4
{
 8003310:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8003312:	2203      	movs	r2, #3
 8003314:	2181      	movs	r1, #129	; 0x81
 8003316:	f000 fdd1 	bl	8003ebc <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800331a:	2301      	movs	r3, #1
 800331c:	62e3      	str	r3, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 800331e:	2010      	movs	r0, #16
 8003320:	f000 fe6e 	bl	8004000 <malloc>
 8003324:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if (pdev->pClassData == NULL)
 8003328:	b118      	cbz	r0, 8003332 <USBD_HID_Init+0x26>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800332a:	2300      	movs	r3, #0
 800332c:	7303      	strb	r3, [r0, #12]
  return USBD_OK;
 800332e:	4618      	mov	r0, r3
}
 8003330:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003332:	2002      	movs	r0, #2
}
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop

08003338 <USBD_HID_SendReport>:
{
 8003338:	b538      	push	{r3, r4, r5, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800333a:	f890 5274 	ldrb.w	r5, [r0, #628]	; 0x274
 800333e:	2d03      	cmp	r5, #3
 8003340:	d001      	beq.n	8003346 <USBD_HID_SendReport+0xe>
}
 8003342:	2000      	movs	r0, #0
 8003344:	bd38      	pop	{r3, r4, r5, pc}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8003346:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
    if(hhid->state == HID_IDLE)
 800334a:	7b23      	ldrb	r3, [r4, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f8      	bne.n	8003342 <USBD_HID_SendReport+0xa>
 8003350:	4613      	mov	r3, r2
 8003352:	460a      	mov	r2, r1
      hhid->state = HID_BUSY;
 8003354:	2101      	movs	r1, #1
 8003356:	7321      	strb	r1, [r4, #12]
      USBD_LL_Transmit (pdev,
 8003358:	2181      	movs	r1, #129	; 0x81
 800335a:	f000 fe0b 	bl	8003f74 <USBD_LL_Transmit>
}
 800335e:	2000      	movs	r0, #0
 8003360:	bd38      	pop	{r3, r4, r5, pc}
 8003362:	bf00      	nop

08003364 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003364:	b188      	cbz	r0, 800338a <USBD_Init+0x26>
{
 8003366:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003368:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800336c:	b113      	cbz	r3, 8003374 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003374:	b109      	cbz	r1, 800337a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003376:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800337a:	2301      	movs	r3, #1
  pdev->id = id;
 800337c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800337e:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003382:	f000 fd5b 	bl	8003e3c <USBD_LL_Init>

  return USBD_OK;
 8003386:	2000      	movs	r0, #0
}
 8003388:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800338a:	2002      	movs	r0, #2
}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003390:	b119      	cbz	r1, 800339a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003392:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8003396:	2000      	movs	r0, #0
 8003398:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800339a:	2002      	movs	r0, #2
  }

  return status;
}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop

080033a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80033a0:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80033a2:	f000 fd7d 	bl	8003ea0 <USBD_LL_Start>

  return USBD_OK;
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd08      	pop	{r3, pc}
 80033aa:	bf00      	nop

080033ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80033ac:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80033ae:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80033b2:	b11b      	cbz	r3, 80033bc <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4798      	blx	r3
 80033b8:	b900      	cbnz	r0, 80033bc <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80033ba:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80033bc:	2002      	movs	r0, #2
}
 80033be:	bd08      	pop	{r3, pc}

080033c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80033c0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80033c2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4798      	blx	r3
  return USBD_OK;
}
 80033ca:	2000      	movs	r0, #0
 80033cc:	bd08      	pop	{r3, pc}
 80033ce:	bf00      	nop

080033d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80033d4:	f500 7520 	add.w	r5, r0, #640	; 0x280
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 fb67 	bl	8003aac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80033de:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 80033e2:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 80033e6:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  pdev->ep0_state = USBD_EP0_SETUP;
 80033ea:	2201      	movs	r2, #1
  switch (pdev->request.bmRequest & 0x1FU)
 80033ec:	f001 031f 	and.w	r3, r1, #31
 80033f0:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 80033f2:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 80033f6:	d015      	beq.n	8003424 <USBD_LL_SetupStage+0x54>
 80033f8:	d30e      	bcc.n	8003418 <USBD_LL_SetupStage+0x48>
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d006      	beq.n	800340c <USBD_LL_SetupStage+0x3c>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80033fe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003402:	4620      	mov	r0, r4
 8003404:	f000 fd78 	bl	8003ef8 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8003408:	2000      	movs	r0, #0
 800340a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800340c:	4629      	mov	r1, r5
 800340e:	4620      	mov	r0, r4
 8003410:	f000 fab8 	bl	8003984 <USBD_StdEPReq>
}
 8003414:	2000      	movs	r0, #0
 8003416:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8003418:	4629      	mov	r1, r5
 800341a:	4620      	mov	r0, r4
 800341c:	f000 f908 	bl	8003630 <USBD_StdDevReq>
}
 8003420:	2000      	movs	r0, #0
 8003422:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003424:	4629      	mov	r1, r5
 8003426:	4620      	mov	r0, r4
 8003428:	f000 fa80 	bl	800392c <USBD_StdItfReq>
}
 800342c:	2000      	movs	r0, #0
 800342e:	bd38      	pop	{r3, r4, r5, pc}

08003430 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8003434:	b941      	cbnz	r1, 8003448 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003436:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800343a:	2b03      	cmp	r3, #3
 800343c:	d00f      	beq.n	800345e <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800343e:	2b05      	cmp	r3, #5
 8003440:	460c      	mov	r4, r1
 8003442:	d02e      	beq.n	80034a2 <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003444:	2000      	movs	r0, #0
}
 8003446:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8003448:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	b1c3      	cbz	r3, 8003482 <USBD_LL_DataOutStage+0x52>
 8003450:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003454:	2a03      	cmp	r2, #3
 8003456:	d114      	bne.n	8003482 <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8003458:	4798      	blx	r3
  return USBD_OK;
 800345a:	2000      	movs	r0, #0
}
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	4616      	mov	r6, r2
      if(pep->rem_length > pep->maxpacket)
 8003460:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8003464:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003468:	4293      	cmp	r3, r2
 800346a:	d90c      	bls.n	8003486 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -=  pep->maxpacket;
 800346c:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx (pdev,
 800346e:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003470:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8003474:	bf8c      	ite	hi
 8003476:	b29a      	uxthhi	r2, r3
 8003478:	b292      	uxthls	r2, r2
 800347a:	4631      	mov	r1, r6
 800347c:	f000 fb72 	bl	8003b64 <USBD_CtlContinueRx>
 8003480:	e7e0      	b.n	8003444 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8003482:	2002      	movs	r0, #2
}
 8003484:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003486:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	b123      	cbz	r3, 8003498 <USBD_LL_DataOutStage+0x68>
 800348e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8003492:	2a03      	cmp	r2, #3
 8003494:	d100      	bne.n	8003498 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 8003496:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003498:	4628      	mov	r0, r5
 800349a:	f000 fb6b 	bl	8003b74 <USBD_CtlSendStatus>
  return USBD_OK;
 800349e:	2000      	movs	r0, #0
}
 80034a0:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 80034a2:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80034a6:	f000 fd27 	bl	8003ef8 <USBD_LL_StallEP>
  return USBD_OK;
 80034aa:	4620      	mov	r0, r4
}
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
 80034ae:	bf00      	nop

080034b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80034b4:	b989      	cbnz	r1, 80034da <USBD_LL_DataInStage+0x2a>
 80034b6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80034b8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80034bc:	2a02      	cmp	r2, #2
 80034be:	d01a      	beq.n	80034f6 <USBD_LL_DataInStage+0x46>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80034c0:	f032 0304 	bics.w	r3, r2, #4
 80034c4:	d102      	bne.n	80034cc <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	f000 fd16 	bl	8003ef8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80034cc:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80034d0:	2b01      	cmp	r3, #1
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80034d2:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 80034d6:	d00b      	beq.n	80034f0 <USBD_LL_DataInStage+0x40>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80034d8:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 80034da:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	b36b      	cbz	r3, 800353e <USBD_LL_DataInStage+0x8e>
 80034e2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80034e6:	2a03      	cmp	r2, #3
 80034e8:	d129      	bne.n	800353e <USBD_LL_DataInStage+0x8e>
    pdev->pClass->DataIn(pdev, epnum);
 80034ea:	4798      	blx	r3
  return USBD_OK;
 80034ec:	2000      	movs	r0, #0
}
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80034f0:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
}
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 80034f6:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 80034fa:	4296      	cmp	r6, r2
 80034fc:	d821      	bhi.n	8003542 <USBD_LL_DataInStage+0x92>
        if((pep->total_length % pep->maxpacket == 0U) &&
 80034fe:	69c3      	ldr	r3, [r0, #28]
 8003500:	fbb3 f5f2 	udiv	r5, r3, r2
 8003504:	fb02 3515 	mls	r5, r2, r5, r3
 8003508:	b90d      	cbnz	r5, 800350e <USBD_LL_DataInStage+0x5e>
 800350a:	429a      	cmp	r2, r3
 800350c:	d927      	bls.n	800355e <USBD_LL_DataInStage+0xae>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800350e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	b12b      	cbz	r3, 8003522 <USBD_LL_DataInStage+0x72>
 8003516:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800351a:	2a03      	cmp	r2, #3
 800351c:	d101      	bne.n	8003522 <USBD_LL_DataInStage+0x72>
            pdev->pClass->EP0_TxSent(pdev);
 800351e:	4620      	mov	r0, r4
 8003520:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fce7 	bl	8003ef8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800352a:	4620      	mov	r0, r4
 800352c:	f000 fb2e 	bl	8003b8c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8003530:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8003534:	2b01      	cmp	r3, #1
      pdev->dev_test_mode = 0U;
 8003536:	f04f 0000 	mov.w	r0, #0
    if (pdev->dev_test_mode == 1U)
 800353a:	d1cd      	bne.n	80034d8 <USBD_LL_DataInStage+0x28>
 800353c:	e7d8      	b.n	80034f0 <USBD_LL_DataInStage+0x40>
    return USBD_FAIL;
 800353e:	2002      	movs	r0, #2
}
 8003540:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8003542:	1ab2      	subs	r2, r6, r2
 8003544:	460d      	mov	r5, r1
 8003546:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8003548:	4619      	mov	r1, r3
 800354a:	b292      	uxth	r2, r2
 800354c:	f000 fb02 	bl	8003b54 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003550:	462b      	mov	r3, r5
 8003552:	462a      	mov	r2, r5
 8003554:	4629      	mov	r1, r5
 8003556:	4620      	mov	r0, r4
 8003558:	f000 fd1a 	bl	8003f90 <USBD_LL_PrepareReceive>
 800355c:	e7b6      	b.n	80034cc <USBD_LL_DataInStage+0x1c>
           (pep->total_length >= pep->maxpacket) &&
 800355e:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8003562:	4293      	cmp	r3, r2
 8003564:	d2d3      	bcs.n	800350e <USBD_LL_DataInStage+0x5e>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003566:	462a      	mov	r2, r5
 8003568:	f000 faf4 	bl	8003b54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800356c:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
 8003570:	e7ee      	b.n	8003550 <USBD_LL_DataInStage+0xa0>
 8003572:	bf00      	nop

08003574 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003574:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003576:	2200      	movs	r2, #0
{
 8003578:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800357a:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800357c:	461e      	mov	r6, r3
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800357e:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003580:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003582:	f000 fc9b 	bl	8003ebc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003586:	4633      	mov	r3, r6
 8003588:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800358a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800358e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003592:	4620      	mov	r0, r4
 8003594:	2200      	movs	r2, #0
 8003596:	f000 fc91 	bl	8003ebc <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800359a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800359e:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80035a0:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80035a2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80035a4:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80035a8:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80035ac:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80035ae:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80035b2:	b123      	cbz	r3, 80035be <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80035b4:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80035b8:	4620      	mov	r0, r4
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4798      	blx	r3
  }

  return USBD_OK;
}
 80035be:	2000      	movs	r0, #0
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	bf00      	nop

080035c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80035c4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80035c6:	2000      	movs	r0, #0
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop

080035cc <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80035cc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80035d0:	f880 2275 	strb.w	r2, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80035d4:	2304      	movs	r3, #4
 80035d6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80035da:	2000      	movs	r0, #0
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80035e0:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
  return USBD_OK;
}
 80035e2:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 80035e4:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80035e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop

080035f0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80035f0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80035f4:	2a03      	cmp	r2, #3
 80035f6:	d001      	beq.n	80035fc <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80035f8:	2000      	movs	r0, #0
 80035fa:	4770      	bx	lr
{
 80035fc:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 80035fe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	b103      	cbz	r3, 8003608 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8003606:	4798      	blx	r3
}
 8003608:	2000      	movs	r0, #0
 800360a:	bd08      	pop	{r3, pc}

0800360c <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800360c:	2000      	movs	r0, #0
 800360e:	4770      	bx	lr

08003610 <USBD_LL_IsoOUTIncomplete>:
 8003610:	2000      	movs	r0, #0
 8003612:	4770      	bx	lr

08003614 <USBD_LL_DevConnected>:
 8003614:	2000      	movs	r0, #0
 8003616:	4770      	bx	lr

08003618 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8003618:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800361a:	2101      	movs	r1, #1
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800361c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003620:	f880 1274 	strb.w	r1, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003624:	6852      	ldr	r2, [r2, #4]
 8003626:	7901      	ldrb	r1, [r0, #4]
 8003628:	4790      	blx	r2

  return USBD_OK;
}
 800362a:	2000      	movs	r0, #0
 800362c:	bd08      	pop	{r3, pc}
 800362e:	bf00      	nop

08003630 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003630:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003632:	780b      	ldrb	r3, [r1, #0]
 8003634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003638:	2b20      	cmp	r3, #32
{
 800363a:	b083      	sub	sp, #12
 800363c:	460d      	mov	r5, r1
 800363e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003640:	d028      	beq.n	8003694 <USBD_StdDevReq+0x64>
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d026      	beq.n	8003694 <USBD_StdDevReq+0x64>
 8003646:	b153      	cbz	r3, 800365e <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	4620      	mov	r0, r4
 800364c:	f000 fc54 	bl	8003ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003650:	4620      	mov	r0, r4
 8003652:	2100      	movs	r1, #0
 8003654:	f000 fc50 	bl	8003ef8 <USBD_LL_StallEP>
}
 8003658:	2000      	movs	r0, #0
 800365a:	b003      	add	sp, #12
 800365c:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800365e:	784b      	ldrb	r3, [r1, #1]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d8f1      	bhi.n	8003648 <USBD_StdDevReq+0x18>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <USBD_StdDevReq+0x3c>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	080036e9 	.word	0x080036e9
 8003670:	08003717 	.word	0x08003717
 8003674:	08003649 	.word	0x08003649
 8003678:	0800372f 	.word	0x0800372f
 800367c:	08003649 	.word	0x08003649
 8003680:	08003737 	.word	0x08003737
 8003684:	08003773 	.word	0x08003773
 8003688:	08003649 	.word	0x08003649
 800368c:	080037a1 	.word	0x080037a1
 8003690:	080036a7 	.word	0x080036a7
    pdev->pClass->Setup(pdev, req);
 8003694:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8003698:	4629      	mov	r1, r5
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4620      	mov	r0, r4
 800369e:	4798      	blx	r3
}
 80036a0:	2000      	movs	r0, #0
 80036a2:	b003      	add	sp, #12
 80036a4:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 80036a6:	7889      	ldrb	r1, [r1, #2]
 80036a8:	4d9f      	ldr	r5, [pc, #636]	; (8003928 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80036aa:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80036ac:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80036ae:	d8cb      	bhi.n	8003648 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80036b0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f000 810c 	beq.w	80038d2 <USBD_StdDevReq+0x2a2>
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	f040 80fd 	bne.w	80038ba <USBD_StdDevReq+0x28a>
      if (cfgidx == 0U)
 80036c0:	2900      	cmp	r1, #0
 80036c2:	f000 8126 	beq.w	8003912 <USBD_StdDevReq+0x2e2>
      else if (cfgidx != pdev->dev_config)
 80036c6:	6841      	ldr	r1, [r0, #4]
 80036c8:	2901      	cmp	r1, #1
 80036ca:	d009      	beq.n	80036e0 <USBD_StdDevReq+0xb0>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80036cc:	b2c9      	uxtb	r1, r1
 80036ce:	f7ff fe77 	bl	80033c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80036d2:	7829      	ldrb	r1, [r5, #0]
 80036d4:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff fe68 	bl	80033ac <USBD_SetClassConfig>
 80036dc:	2802      	cmp	r0, #2
 80036de:	d0b3      	beq.n	8003648 <USBD_StdDevReq+0x18>
      USBD_CtlSendStatus(pdev);
 80036e0:	4620      	mov	r0, r4
 80036e2:	f000 fa47 	bl	8003b74 <USBD_CtlSendStatus>
 80036e6:	e7b7      	b.n	8003658 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80036e8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80036ec:	3b01      	subs	r3, #1
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	f04f 0203 	mov.w	r2, #3
 80036f4:	d8a8      	bhi.n	8003648 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 80036f6:	88cb      	ldrh	r3, [r1, #6]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d1a5      	bne.n	8003648 <USBD_StdDevReq+0x18>
    if (pdev->dev_remote_wakeup)
 80036fc:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003700:	2101      	movs	r1, #1
 8003702:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8003704:	b103      	cbz	r3, 8003708 <USBD_StdDevReq+0xd8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003706:	60c2      	str	r2, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003708:	2202      	movs	r2, #2
 800370a:	f104 010c 	add.w	r1, r4, #12
 800370e:	4620      	mov	r0, r4
 8003710:	f000 fa12 	bl	8003b38 <USBD_CtlSendData>
 8003714:	e7a0      	b.n	8003658 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8003716:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800371a:	3b01      	subs	r3, #1
 800371c:	2b02      	cmp	r3, #2
 800371e:	d893      	bhi.n	8003648 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003720:	884b      	ldrh	r3, [r1, #2]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d198      	bne.n	8003658 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800372c:	e7d8      	b.n	80036e0 <USBD_StdDevReq+0xb0>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800372e:	884b      	ldrh	r3, [r1, #2]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d191      	bne.n	8003658 <USBD_StdDevReq+0x28>
 8003734:	e7f8      	b.n	8003728 <USBD_StdDevReq+0xf8>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003736:	888b      	ldrh	r3, [r1, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d185      	bne.n	8003648 <USBD_StdDevReq+0x18>
 800373c:	88cb      	ldrh	r3, [r1, #6]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d182      	bne.n	8003648 <USBD_StdDevReq+0x18>
 8003742:	884d      	ldrh	r5, [r1, #2]
 8003744:	2d7f      	cmp	r5, #127	; 0x7f
 8003746:	f63f af7f 	bhi.w	8003648 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800374a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800374e:	2b03      	cmp	r3, #3
 8003750:	f43f af7a 	beq.w	8003648 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003754:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003756:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800375a:	f000 fbfd 	bl	8003f58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800375e:	4620      	mov	r0, r4
 8003760:	f000 fa08 	bl	8003b74 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003764:	2d00      	cmp	r5, #0
 8003766:	f000 80d0 	beq.w	800390a <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800376a:	2302      	movs	r3, #2
 800376c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8003770:	e772      	b.n	8003658 <USBD_StdDevReq+0x28>
      USBD_GetDescriptor (pdev, req);
 8003772:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 8003774:	0a13      	lsrs	r3, r2, #8
 8003776:	3b01      	subs	r3, #1
 8003778:	2b06      	cmp	r3, #6
 800377a:	f63f af65 	bhi.w	8003648 <USBD_StdDevReq+0x18>
 800377e:	a101      	add	r1, pc, #4	; (adr r1, 8003784 <USBD_StdDevReq+0x154>)
 8003780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003784:	08003839 	.word	0x08003839
 8003788:	08003821 	.word	0x08003821
 800378c:	08003849 	.word	0x08003849
 8003790:	08003649 	.word	0x08003649
 8003794:	08003649 	.word	0x08003649
 8003798:	0800380b 	.word	0x0800380b
 800379c:	080037c7 	.word	0x080037c7
  if (req->wLength != 1U)
 80037a0:	88ca      	ldrh	r2, [r1, #6]
 80037a2:	2a01      	cmp	r2, #1
 80037a4:	f47f af50 	bne.w	8003648 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80037a8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f43f af4b 	beq.w	8003648 <USBD_StdDevReq+0x18>
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	f240 809b 	bls.w	80038ee <USBD_StdDevReq+0x2be>
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	f47f af45 	bne.w	8003648 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80037be:	1d01      	adds	r1, r0, #4
 80037c0:	f000 f9ba 	bl	8003b38 <USBD_CtlSendData>
 80037c4:	e748      	b.n	8003658 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80037c6:	7c03      	ldrb	r3, [r0, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f af3d 	bne.w	8003648 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80037ce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80037d2:	f10d 0006 	add.w	r0, sp, #6
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80037da:	2307      	movs	r3, #7
 80037dc:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 80037de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80037e2:	88ea      	ldrh	r2, [r5, #6]
 80037e4:	b16b      	cbz	r3, 8003802 <USBD_StdDevReq+0x1d2>
 80037e6:	2a00      	cmp	r2, #0
 80037e8:	f43f af7a 	beq.w	80036e0 <USBD_StdDevReq+0xb0>
    len = MIN(len, req->wLength);
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf28      	it	cs
 80037f0:	4613      	movcs	r3, r2
    USBD_CtlSendData (pdev, pbuf, len);
 80037f2:	461a      	mov	r2, r3
 80037f4:	4601      	mov	r1, r0
 80037f6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80037f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80037fc:	f000 f99c 	bl	8003b38 <USBD_CtlSendData>
 8003800:	88ea      	ldrh	r2, [r5, #6]
  if(req->wLength == 0U)
 8003802:	2a00      	cmp	r2, #0
 8003804:	f47f af28 	bne.w	8003658 <USBD_StdDevReq+0x28>
 8003808:	e76a      	b.n	80036e0 <USBD_StdDevReq+0xb0>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800380a:	7c03      	ldrb	r3, [r0, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f af1b 	bne.w	8003648 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003812:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003816:	f10d 0006 	add.w	r0, sp, #6
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	4798      	blx	r3
 800381e:	e7de      	b.n	80037de <USBD_StdDevReq+0x1ae>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8003820:	7c02      	ldrb	r2, [r0, #16]
 8003822:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8003826:	2a00      	cmp	r2, #0
 8003828:	d168      	bne.n	80038fc <USBD_StdDevReq+0x2cc>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	f10d 0006 	add.w	r0, sp, #6
 8003830:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003832:	2302      	movs	r3, #2
 8003834:	7043      	strb	r3, [r0, #1]
 8003836:	e7d2      	b.n	80037de <USBD_StdDevReq+0x1ae>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003838:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800383c:	7c00      	ldrb	r0, [r0, #16]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f10d 0106 	add.w	r1, sp, #6
 8003844:	4798      	blx	r3
 8003846:	e7ca      	b.n	80037de <USBD_StdDevReq+0x1ae>
    switch ((uint8_t)(req->wValue))
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	2a05      	cmp	r2, #5
 800384c:	f63f aefc 	bhi.w	8003648 <USBD_StdDevReq+0x18>
 8003850:	e8df f002 	tbb	[pc, r2]
 8003854:	131b232b 	.word	0x131b232b
 8003858:	030b      	.short	0x030b
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800385a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800385e:	7c00      	ldrb	r0, [r0, #16]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f10d 0106 	add.w	r1, sp, #6
 8003866:	4798      	blx	r3
 8003868:	e7b9      	b.n	80037de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800386a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800386e:	7c00      	ldrb	r0, [r0, #16]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f10d 0106 	add.w	r1, sp, #6
 8003876:	4798      	blx	r3
 8003878:	e7b1      	b.n	80037de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800387a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800387e:	7c00      	ldrb	r0, [r0, #16]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f10d 0106 	add.w	r1, sp, #6
 8003886:	4798      	blx	r3
 8003888:	e7a9      	b.n	80037de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800388a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800388e:	7c00      	ldrb	r0, [r0, #16]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f10d 0106 	add.w	r1, sp, #6
 8003896:	4798      	blx	r3
 8003898:	e7a1      	b.n	80037de <USBD_StdDevReq+0x1ae>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800389a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800389e:	7c00      	ldrb	r0, [r0, #16]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f10d 0106 	add.w	r1, sp, #6
 80038a6:	4798      	blx	r3
 80038a8:	e799      	b.n	80037de <USBD_StdDevReq+0x1ae>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80038aa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80038ae:	7c00      	ldrb	r0, [r0, #16]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f10d 0106 	add.w	r1, sp, #6
 80038b6:	4798      	blx	r3
 80038b8:	e791      	b.n	80037de <USBD_StdDevReq+0x1ae>
  USBD_LL_StallEP(pdev , 0x80U);
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	f000 fb1c 	bl	8003ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80038c0:	2100      	movs	r1, #0
 80038c2:	4620      	mov	r0, r4
 80038c4:	f000 fb18 	bl	8003ef8 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 80038c8:	7829      	ldrb	r1, [r5, #0]
 80038ca:	4620      	mov	r0, r4
 80038cc:	f7ff fd78 	bl	80033c0 <USBD_ClrClassConfig>
 80038d0:	e6c2      	b.n	8003658 <USBD_StdDevReq+0x28>
      if (cfgidx)
 80038d2:	2900      	cmp	r1, #0
 80038d4:	f43f af04 	beq.w	80036e0 <USBD_StdDevReq+0xb0>
        pdev->dev_config = cfgidx;
 80038d8:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80038da:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80038dc:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80038de:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80038e2:	f7ff fd63 	bl	80033ac <USBD_SetClassConfig>
 80038e6:	2802      	cmp	r0, #2
 80038e8:	f47f aefa 	bne.w	80036e0 <USBD_StdDevReq+0xb0>
 80038ec:	e6ac      	b.n	8003648 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80038ee:	4601      	mov	r1, r0
 80038f0:	2300      	movs	r3, #0
 80038f2:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80038f6:	f000 f91f 	bl	8003b38 <USBD_CtlSendData>
 80038fa:	e6ad      	b.n	8003658 <USBD_StdDevReq+0x28>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f10d 0006 	add.w	r0, sp, #6
 8003902:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003904:	2302      	movs	r3, #2
 8003906:	7043      	strb	r3, [r0, #1]
 8003908:	e769      	b.n	80037de <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800390a:	2301      	movs	r3, #1
 800390c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8003910:	e6a2      	b.n	8003658 <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003912:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 8003914:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003916:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800391a:	f7ff fd51 	bl	80033c0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f928 	bl	8003b74 <USBD_CtlSendStatus>
 8003924:	e698      	b.n	8003658 <USBD_StdDevReq+0x28>
 8003926:	bf00      	nop
 8003928:	200001e8 	.word	0x200001e8

0800392c <USBD_StdItfReq>:
{
 800392c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800392e:	780b      	ldrb	r3, [r1, #0]
 8003930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003934:	2b20      	cmp	r3, #32
{
 8003936:	460d      	mov	r5, r1
 8003938:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800393a:	d00c      	beq.n	8003956 <USBD_StdItfReq+0x2a>
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d00a      	beq.n	8003956 <USBD_StdItfReq+0x2a>
 8003940:	b14b      	cbz	r3, 8003956 <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev , 0x80U);
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	4620      	mov	r0, r4
 8003946:	f000 fad7 	bl	8003ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800394a:	4620      	mov	r0, r4
 800394c:	2100      	movs	r1, #0
 800394e:	f000 fad3 	bl	8003ef8 <USBD_LL_StallEP>
}
 8003952:	2000      	movs	r0, #0
 8003954:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8003956:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800395a:	3b01      	subs	r3, #1
 800395c:	2b02      	cmp	r3, #2
 800395e:	d8f0      	bhi.n	8003942 <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003960:	792b      	ldrb	r3, [r5, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d8ed      	bhi.n	8003942 <USBD_StdItfReq+0x16>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8003966:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800396a:	4629      	mov	r1, r5
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4620      	mov	r0, r4
 8003970:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8003972:	88eb      	ldrh	r3, [r5, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ec      	bne.n	8003952 <USBD_StdItfReq+0x26>
 8003978:	2800      	cmp	r0, #0
 800397a:	d1ea      	bne.n	8003952 <USBD_StdItfReq+0x26>
          USBD_CtlSendStatus(pdev);
 800397c:	4620      	mov	r0, r4
 800397e:	f000 f8f9 	bl	8003b74 <USBD_CtlSendStatus>
 8003982:	e7e6      	b.n	8003952 <USBD_StdItfReq+0x26>

08003984 <USBD_StdEPReq>:
{
 8003984:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003986:	780b      	ldrb	r3, [r1, #0]
 8003988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800398c:	2b20      	cmp	r3, #32
{
 800398e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003990:	d00c      	beq.n	80039ac <USBD_StdEPReq+0x28>
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d00a      	beq.n	80039ac <USBD_StdEPReq+0x28>
 8003996:	b183      	cbz	r3, 80039ba <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	4620      	mov	r0, r4
 800399c:	f000 faac 	bl	8003ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80039a0:	4620      	mov	r0, r4
 80039a2:	2100      	movs	r1, #0
 80039a4:	f000 faa8 	bl	8003ef8 <USBD_LL_StallEP>
}
 80039a8:	2000      	movs	r0, #0
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 80039ac:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80039b0:	4620      	mov	r0, r4
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4798      	blx	r3
}
 80039b6:	2000      	movs	r0, #0
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 80039ba:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80039bc:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80039be:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 80039c0:	b2d5      	uxtb	r5, r2
    switch (req->bRequest)
 80039c2:	d03d      	beq.n	8003a40 <USBD_StdEPReq+0xbc>
 80039c4:	d314      	bcc.n	80039f0 <USBD_StdEPReq+0x6c>
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d1e6      	bne.n	8003998 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 80039ca:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d045      	beq.n	8003a5e <USBD_StdEPReq+0xda>
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d1e0      	bne.n	8003998 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80039d6:	884b      	ldrh	r3, [r1, #2]
 80039d8:	b933      	cbnz	r3, 80039e8 <USBD_StdEPReq+0x64>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80039da:	066a      	lsls	r2, r5, #25
 80039dc:	d004      	beq.n	80039e8 <USBD_StdEPReq+0x64>
 80039de:	88cb      	ldrh	r3, [r1, #6]
 80039e0:	b913      	cbnz	r3, 80039e8 <USBD_StdEPReq+0x64>
            USBD_LL_StallEP(pdev, ep_addr);
 80039e2:	4629      	mov	r1, r5
 80039e4:	f000 fa88 	bl	8003ef8 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 f8c3 	bl	8003b74 <USBD_CtlSendStatus>
        break;
 80039ee:	e7db      	b.n	80039a8 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 80039f0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d03c      	beq.n	8003a72 <USBD_StdEPReq+0xee>
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d1cd      	bne.n	8003998 <USBD_StdEPReq+0x14>
 80039fc:	f005 030f 	and.w	r3, r5, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003a00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8003a04:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003a06:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 8003a0a:	d441      	bmi.n	8003a90 <USBD_StdEPReq+0x10c>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003a0c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0c1      	beq.n	8003998 <USBD_StdEPReq+0x14>
 8003a14:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003a18:	2614      	movs	r6, #20
 8003a1a:	fb06 0603 	mla	r6, r6, r3, r0
 8003a1e:	f506 76a0 	add.w	r6, r6, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003a22:	b133      	cbz	r3, 8003a32 <USBD_StdEPReq+0xae>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003a24:	4629      	mov	r1, r5
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 fa82 	bl	8003f30 <USBD_LL_IsStallEP>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d03a      	beq.n	8003aa6 <USBD_StdEPReq+0x122>
            pep->status = 0x0001U;
 8003a30:	2301      	movs	r3, #1
 8003a32:	6033      	str	r3, [r6, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003a34:	4631      	mov	r1, r6
 8003a36:	4620      	mov	r0, r4
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f000 f87d 	bl	8003b38 <USBD_CtlSendData>
          break;
 8003a3e:	e7b3      	b.n	80039a8 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8003a40:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d00a      	beq.n	8003a5e <USBD_StdEPReq+0xda>
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d1a5      	bne.n	8003998 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003a4c:	884b      	ldrh	r3, [r1, #2]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1aa      	bne.n	80039a8 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003a52:	066e      	lsls	r6, r5, #25
 8003a54:	d0c8      	beq.n	80039e8 <USBD_StdEPReq+0x64>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8003a56:	4629      	mov	r1, r5
 8003a58:	f000 fa5c 	bl	8003f14 <USBD_LL_ClearStallEP>
 8003a5c:	e7c4      	b.n	80039e8 <USBD_StdEPReq+0x64>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a5e:	066b      	lsls	r3, r5, #25
 8003a60:	d09a      	beq.n	8003998 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 8003a62:	4629      	mov	r1, r5
 8003a64:	f000 fa48 	bl	8003ef8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8003a68:	4620      	mov	r0, r4
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	f000 fa44 	bl	8003ef8 <USBD_LL_StallEP>
 8003a70:	e79a      	b.n	80039a8 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003a72:	0668      	lsls	r0, r5, #25
 8003a74:	d190      	bne.n	8003998 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003a76:	0611      	lsls	r1, r2, #24
 8003a78:	bf4c      	ite	mi
 8003a7a:	f104 0114 	addmi.w	r1, r4, #20
 8003a7e:	f504 71a0 	addpl.w	r1, r4, #320	; 0x140
          pep->status = 0x0000U;
 8003a82:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003a84:	4620      	mov	r0, r4
          pep->status = 0x0000U;
 8003a86:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f000 f855 	bl	8003b38 <USBD_CtlSendData>
          break;
 8003a8e:	e78b      	b.n	80039a8 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d080      	beq.n	8003998 <USBD_StdEPReq+0x14>
 8003a96:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8003a9a:	1c5e      	adds	r6, r3, #1
 8003a9c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003aa0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003aa4:	e7bd      	b.n	8003a22 <USBD_StdEPReq+0x9e>
            pep->status = 0x0000U;
 8003aa6:	6030      	str	r0, [r6, #0]
 8003aa8:	e7c4      	b.n	8003a34 <USBD_StdEPReq+0xb0>
 8003aaa:	bf00      	nop

08003aac <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003aac:	780b      	ldrb	r3, [r1, #0]
 8003aae:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003ab0:	784b      	ldrb	r3, [r1, #1]
 8003ab2:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003ab4:	78ca      	ldrb	r2, [r1, #3]
 8003ab6:	788b      	ldrb	r3, [r1, #2]
 8003ab8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003abc:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003abe:	794a      	ldrb	r2, [r1, #5]
 8003ac0:	790b      	ldrb	r3, [r1, #4]
 8003ac2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ac6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003ac8:	79ca      	ldrb	r2, [r1, #7]
 8003aca:	798b      	ldrb	r3, [r1, #6]
 8003acc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ad0:	80c3      	strh	r3, [r0, #6]
}
 8003ad2:	4770      	bx	lr

08003ad4 <USBD_CtlError>:
{
 8003ad4:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8003ad6:	2180      	movs	r1, #128	; 0x80
{
 8003ad8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8003ada:	f000 fa0d 	bl	8003ef8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	2100      	movs	r1, #0
}
 8003ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8003ae6:	f000 ba07 	b.w	8003ef8 <USBD_LL_StallEP>
 8003aea:	bf00      	nop

08003aec <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8003aec:	b300      	cbz	r0, 8003b30 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8003aee:	7803      	ldrb	r3, [r0, #0]
{
 8003af0:	b430      	push	{r4, r5}
    while (*buf != '\0')
 8003af2:	b1f3      	cbz	r3, 8003b32 <USBD_GetString+0x46>
 8003af4:	4604      	mov	r4, r0
    uint8_t  len = 0U;
 8003af6:	2300      	movs	r3, #0
    while (*buf != '\0')
 8003af8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 8003afc:	3301      	adds	r3, #1
 8003afe:	b2db      	uxtb	r3, r3
    while (*buf != '\0')
 8003b00:	2d00      	cmp	r5, #0
 8003b02:	d1f9      	bne.n	8003af8 <USBD_GetString+0xc>
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003b08:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003b0a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003b0c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003b0e:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8003b10:	7804      	ldrb	r4, [r0, #0]
 8003b12:	b15c      	cbz	r4, 8003b2c <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003b14:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8003b16:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8003b1e:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8003b20:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8003b24:	3302      	adds	r3, #2
 8003b26:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8003b28:	2c00      	cmp	r4, #0
 8003b2a:	d1f5      	bne.n	8003b18 <USBD_GetString+0x2c>
}
 8003b2c:	bc30      	pop	{r4, r5}
 8003b2e:	4770      	bx	lr
 8003b30:	4770      	bx	lr
    while (*buf != '\0')
 8003b32:	2302      	movs	r3, #2
 8003b34:	e7e8      	b.n	8003b08 <USBD_GetString+0x1c>
 8003b36:	bf00      	nop

08003b38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003b3c:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003b3e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003b40:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003b44:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f000 fa13 	bl	8003f74 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b4e:	2000      	movs	r0, #0
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop

08003b54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8003b54:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003b56:	4613      	mov	r3, r2
 8003b58:	460a      	mov	r2, r1
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f000 fa0a 	bl	8003f74 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b60:	2000      	movs	r0, #0
 8003b62:	bd08      	pop	{r3, pc}

08003b64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8003b64:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003b66:	4613      	mov	r3, r2
 8003b68:	460a      	mov	r2, r1
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f000 fa10 	bl	8003f90 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b70:	2000      	movs	r0, #0
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8003b74:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003b76:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003b78:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003b7a:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003b7e:	4619      	mov	r1, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	f000 f9f7 	bl	8003f74 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003b86:	2000      	movs	r0, #0
 8003b88:	bd08      	pop	{r3, pc}
 8003b8a:	bf00      	nop

08003b8c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8003b8c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003b8e:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003b90:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003b92:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8003b96:	4619      	mov	r1, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f000 f9f9 	bl	8003f90 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	bd08      	pop	{r3, pc}
 8003ba2:	bf00      	nop

08003ba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003ba4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	490c      	ldr	r1, [pc, #48]	; (8003bdc <MX_USB_DEVICE_Init+0x38>)
 8003baa:	480d      	ldr	r0, [pc, #52]	; (8003be0 <MX_USB_DEVICE_Init+0x3c>)
 8003bac:	f7ff fbda 	bl	8003364 <USBD_Init>
 8003bb0:	b980      	cbnz	r0, 8003bd4 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8003bb2:	490c      	ldr	r1, [pc, #48]	; (8003be4 <MX_USB_DEVICE_Init+0x40>)
 8003bb4:	480a      	ldr	r0, [pc, #40]	; (8003be0 <MX_USB_DEVICE_Init+0x3c>)
 8003bb6:	f7ff fbeb 	bl	8003390 <USBD_RegisterClass>
 8003bba:	b940      	cbnz	r0, 8003bce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003bbc:	4808      	ldr	r0, [pc, #32]	; (8003be0 <MX_USB_DEVICE_Init+0x3c>)
 8003bbe:	f7ff fbef 	bl	80033a0 <USBD_Start>
 8003bc2:	b900      	cbnz	r0, 8003bc6 <MX_USB_DEVICE_Init+0x22>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003bc4:	bd08      	pop	{r3, pc}
 8003bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003bca:	f7fc be8d 	b.w	80008e8 <Error_Handler>
    Error_Handler();
 8003bce:	f7fc fe8b 	bl	80008e8 <Error_Handler>
 8003bd2:	e7f3      	b.n	8003bbc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003bd4:	f7fc fe88 	bl	80008e8 <Error_Handler>
 8003bd8:	e7eb      	b.n	8003bb2 <MX_USB_DEVICE_Init+0xe>
 8003bda:	bf00      	nop
 8003bdc:	20000114 	.word	0x20000114
 8003be0:	200002ec 	.word	0x200002ec
 8003be4:	20000058 	.word	0x20000058

08003be8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003be8:	2312      	movs	r3, #18
 8003bea:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003bec:	4800      	ldr	r0, [pc, #0]	; (8003bf0 <USBD_FS_DeviceDescriptor+0x8>)
 8003bee:	4770      	bx	lr
 8003bf0:	20000130 	.word	0x20000130

08003bf4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003bf8:	4800      	ldr	r0, [pc, #0]	; (8003bfc <USBD_FS_LangIDStrDescriptor+0x8>)
 8003bfa:	4770      	bx	lr
 8003bfc:	20000144 	.word	0x20000144

08003c00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003c00:	3a01      	subs	r2, #1
 8003c02:	b430      	push	{r4, r5}
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	1c8c      	adds	r4, r1, #2
 8003c08:	eb04 0442 	add.w	r4, r4, r2, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003c0c:	2500      	movs	r5, #0
    if (((value >> 28)) < 0xA)
 8003c0e:	0f02      	lsrs	r2, r0, #28
 8003c10:	2a09      	cmp	r2, #9
 8003c12:	b2d3      	uxtb	r3, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8003c14:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003c18:	bf8a      	itet	hi
 8003c1a:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8003c1c:	700a      	strbls	r2, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003c1e:	700b      	strbhi	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8003c20:	704d      	strb	r5, [r1, #1]
 8003c22:	3102      	adds	r1, #2
  for (idx = 0; idx < len; idx++)
 8003c24:	428c      	cmp	r4, r1
    value = value << 4;
 8003c26:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8003c2a:	d1f0      	bne.n	8003c0e <IntToUnicode+0xe>
  }
}
 8003c2c:	bc30      	pop	{r4, r5}
 8003c2e:	4770      	bx	lr

08003c30 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003c34:	6810      	ldr	r0, [r2, #0]
  deviceserial0 += deviceserial2;
 8003c36:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8003c38:	221a      	movs	r2, #26
  if (deviceserial0 != 0)
 8003c3a:	18c0      	adds	r0, r0, r3
  *length = USB_SIZ_STRING_SERIAL;
 8003c3c:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8003c3e:	d101      	bne.n	8003c44 <USBD_FS_SerialStrDescriptor+0x14>
}
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <USBD_FS_SerialStrDescriptor+0x38>)
 8003c42:	4770      	bx	lr
{
 8003c44:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <USBD_FS_SerialStrDescriptor+0x40>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003c4a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	f7ff ffd7 	bl	8003c00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003c52:	4620      	mov	r0, r4
 8003c54:	2204      	movs	r2, #4
 8003c56:	4907      	ldr	r1, [pc, #28]	; (8003c74 <USBD_FS_SerialStrDescriptor+0x44>)
 8003c58:	f7ff ffd2 	bl	8003c00 <IntToUnicode>
}
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <USBD_FS_SerialStrDescriptor+0x38>)
 8003c5e:	bd10      	pop	{r4, pc}
 8003c60:	1fff7a10 	.word	0x1fff7a10
 8003c64:	1fff7a18 	.word	0x1fff7a18
 8003c68:	20000148 	.word	0x20000148
 8003c6c:	1fff7a14 	.word	0x1fff7a14
 8003c70:	2000014a 	.word	0x2000014a
 8003c74:	2000015a 	.word	0x2000015a

08003c78 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003c78:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003c7a:	4c04      	ldr	r4, [pc, #16]	; (8003c8c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003c7c:	4804      	ldr	r0, [pc, #16]	; (8003c90 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003c7e:	460a      	mov	r2, r1
 8003c80:	4621      	mov	r1, r4
 8003c82:	f7ff ff33 	bl	8003aec <USBD_GetString>
}
 8003c86:	4620      	mov	r0, r4
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000588 	.word	0x20000588
 8003c90:	080041e0 	.word	0x080041e0

08003c94 <USBD_FS_ProductStrDescriptor>:
{
 8003c94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003c96:	4c04      	ldr	r4, [pc, #16]	; (8003ca8 <USBD_FS_ProductStrDescriptor+0x14>)
 8003c98:	4804      	ldr	r0, [pc, #16]	; (8003cac <USBD_FS_ProductStrDescriptor+0x18>)
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	f7ff ff25 	bl	8003aec <USBD_GetString>
}
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000588 	.word	0x20000588
 8003cac:	080041f4 	.word	0x080041f4

08003cb0 <USBD_FS_ConfigStrDescriptor>:
{
 8003cb0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003cb2:	4c04      	ldr	r4, [pc, #16]	; (8003cc4 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	4621      	mov	r1, r4
 8003cba:	f7ff ff17 	bl	8003aec <USBD_GetString>
}
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000588 	.word	0x20000588
 8003cc8:	080041c4 	.word	0x080041c4

08003ccc <USBD_FS_InterfaceStrDescriptor>:
{
 8003ccc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003cce:	4c04      	ldr	r4, [pc, #16]	; (8003ce0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003cd0:	4804      	ldr	r0, [pc, #16]	; (8003ce4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	f7ff ff09 	bl	8003aec <USBD_GetString>
}
 8003cda:	4620      	mov	r0, r4
 8003cdc:	bd10      	pop	{r4, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000588 	.word	0x20000588
 8003ce4:	080041d0 	.word	0x080041d0

08003ce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003ce8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8003cea:	6803      	ldr	r3, [r0, #0]
{
 8003cec:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cee:	2400      	movs	r4, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8003cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003cf8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003cfc:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003cfe:	d001      	beq.n	8003d04 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003d00:	b009      	add	sp, #36	; 0x24
 8003d02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	4d1b      	ldr	r5, [pc, #108]	; (8003d74 <HAL_PCD_MspInit+0x8c>)
 8003d06:	9401      	str	r4, [sp, #4]
 8003d08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003d0a:	481b      	ldr	r0, [pc, #108]	; (8003d78 <HAL_PCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	632b      	str	r3, [r5, #48]	; 0x30
 8003d12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003d1a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d20:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003d22:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003d24:	f7fc ff94 	bl	8000c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003d28:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d30:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003d32:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d34:	4810      	ldr	r0, [pc, #64]	; (8003d78 <HAL_PCD_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d38:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3e:	f7fc ff87 	bl	8000c50 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d48:	636b      	str	r3, [r5, #52]	; 0x34
 8003d4a:	9402      	str	r4, [sp, #8]
 8003d4c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d52:	646b      	str	r3, [r5, #68]	; 0x44
 8003d54:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5a:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4621      	mov	r1, r4
 8003d60:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d62:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003d64:	f7fc ff16 	bl	8000b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003d68:	2043      	movs	r0, #67	; 0x43
 8003d6a:	f7fc ff49 	bl	8000c00 <HAL_NVIC_EnableIRQ>
}
 8003d6e:	b009      	add	sp, #36	; 0x24
 8003d70:	bd30      	pop	{r4, r5, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40020000 	.word	0x40020000

08003d7c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003d7c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003d80:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d84:	f7ff bb24 	b.w	80033d0 <USBD_LL_SetupStage>

08003d88 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003d88:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003d8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003d90:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003d98:	f7ff bb4a 	b.w	8003430 <USBD_LL_DataOutStage>

08003d9c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003d9c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8003da0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003da4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003da8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003daa:	f7ff bb81 	b.w	80034b0 <USBD_LL_DataInStage>
 8003dae:	bf00      	nop

08003db0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003db0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003db4:	f7ff bc1c 	b.w	80035f0 <USBD_LL_SOF>

08003db8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003db8:	68c1      	ldr	r1, [r0, #12]
{ 
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003dbe:	b121      	cbz	r1, 8003dca <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8003dc0:	2902      	cmp	r1, #2
 8003dc2:	d00c      	beq.n	8003dde <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8003dc4:	f7fc fd90 	bl	80008e8 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8003dc8:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003dca:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8003dce:	f7ff fbf9 	bl	80035c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003dd2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8003dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003dda:	f7ff bbcb 	b.w	8003574 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 8003dde:	2101      	movs	r1, #1
 8003de0:	e7f3      	b.n	8003dca <HAL_PCD_ResetCallback+0x12>
 8003de2:	bf00      	nop

08003de4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003de4:	b510      	push	{r4, lr}
 8003de6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003de8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003dec:	f7ff fbee 	bl	80035cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003dfe:	6a23      	ldr	r3, [r4, #32]
 8003e00:	b123      	cbz	r3, 8003e0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003e02:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_PCD_SuspendCallback+0x2c>)
 8003e04:	6913      	ldr	r3, [r2, #16]
 8003e06:	f043 0306 	orr.w	r3, r3, #6
 8003e0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	bf00      	nop
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003e14:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003e18:	f7ff bbe2 	b.w	80035e0 <USBD_LL_Resume>

08003e1c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003e1c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003e20:	f7ff bbf6 	b.w	8003610 <USBD_LL_IsoOUTIncomplete>

08003e24 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003e24:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003e28:	f7ff bbf0 	b.w	800360c <USBD_LL_IsoINIncomplete>

08003e2c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003e2c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003e30:	f7ff bbf0 	b.w	8003614 <USBD_LL_DevConnected>

08003e34 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003e34:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003e38:	f7ff bbee 	b.w	8003618 <USBD_LL_DevDisconnected>

08003e3c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003e3c:	7802      	ldrb	r2, [r0, #0]
 8003e3e:	b10a      	cbz	r2, 8003e44 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8003e40:	2000      	movs	r0, #0
 8003e42:	4770      	bx	lr
{
 8003e44:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003e48:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 8003e4a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003e4e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003e52:	2404      	movs	r4, #4
  pdev->pData = &hpcd_USB_OTG_FS;
 8003e54:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003e58:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003e5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003e5c:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003e62:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003e66:	e9c3 5400 	strd	r5, r4, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003e6a:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003e6c:	6199      	str	r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003e6e:	f7fd fb19 	bl	80014a4 <HAL_PCD_Init>
 8003e72:	b978      	cbnz	r0, 8003e94 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	4809      	ldr	r0, [pc, #36]	; (8003e9c <USBD_LL_Init+0x60>)
 8003e78:	f7fe f880 	bl	8001f7c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4806      	ldr	r0, [pc, #24]	; (8003e9c <USBD_LL_Init+0x60>)
 8003e82:	f7fe f857 	bl	8001f34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4804      	ldr	r0, [pc, #16]	; (8003e9c <USBD_LL_Init+0x60>)
 8003e8c:	f7fe f852 	bl	8001f34 <HAL_PCDEx_SetTxFiFo>
}
 8003e90:	2000      	movs	r0, #0
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8003e94:	f7fc fd28 	bl	80008e8 <Error_Handler>
 8003e98:	e7ec      	b.n	8003e74 <USBD_LL_Init+0x38>
 8003e9a:	bf00      	nop
 8003e9c:	20000788 	.word	0x20000788

08003ea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003ea0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003ea2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003ea6:	f7fd fb89 	bl	80015bc <HAL_PCD_Start>
 8003eaa:	2803      	cmp	r0, #3
 8003eac:	bf96      	itet	ls
 8003eae:	4b02      	ldrls	r3, [pc, #8]	; (8003eb8 <USBD_LL_Start+0x18>)
 8003eb0:	2002      	movhi	r0, #2
 8003eb2:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8003eb4:	bd08      	pop	{r3, pc}
 8003eb6:	bf00      	nop
 8003eb8:	08004200 	.word	0x08004200

08003ebc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003ec0:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	f7fd ff08 	bl	8001cdc <HAL_PCD_EP_Open>
 8003ecc:	2803      	cmp	r0, #3
 8003ece:	bf96      	itet	ls
 8003ed0:	4b01      	ldrls	r3, [pc, #4]	; (8003ed8 <USBD_LL_OpenEP+0x1c>)
 8003ed2:	2002      	movhi	r0, #2
 8003ed4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003ed6:	bd10      	pop	{r4, pc}
 8003ed8:	08004200 	.word	0x08004200

08003edc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003edc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003ede:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003ee2:	f7fd ff2f 	bl	8001d44 <HAL_PCD_EP_Close>
 8003ee6:	2803      	cmp	r0, #3
 8003ee8:	bf96      	itet	ls
 8003eea:	4b02      	ldrls	r3, [pc, #8]	; (8003ef4 <USBD_LL_CloseEP+0x18>)
 8003eec:	2002      	movhi	r0, #2
 8003eee:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 
  return usb_status;  
}
 8003ef0:	bd08      	pop	{r3, pc}
 8003ef2:	bf00      	nop
 8003ef4:	08004200 	.word	0x08004200

08003ef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ef8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003efa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003efe:	f7fd ff9d 	bl	8001e3c <HAL_PCD_EP_SetStall>
 8003f02:	2803      	cmp	r0, #3
 8003f04:	bf96      	itet	ls
 8003f06:	4b02      	ldrls	r3, [pc, #8]	; (8003f10 <USBD_LL_StallEP+0x18>)
 8003f08:	2002      	movhi	r0, #2
 8003f0a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003f0c:	bd08      	pop	{r3, pc}
 8003f0e:	bf00      	nop
 8003f10:	08004200 	.word	0x08004200

08003f14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003f14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003f16:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003f1a:	f7fd ffd3 	bl	8001ec4 <HAL_PCD_EP_ClrStall>
 8003f1e:	2803      	cmp	r0, #3
 8003f20:	bf96      	itet	ls
 8003f22:	4b02      	ldrls	r3, [pc, #8]	; (8003f2c <USBD_LL_ClearStallEP+0x18>)
 8003f24:	2002      	movhi	r0, #2
 8003f26:	5c18      	ldrbls	r0, [r3, r0]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8003f28:	bd08      	pop	{r3, pc}
 8003f2a:	bf00      	nop
 8003f2c:	08004200 	.word	0x08004200

08003f30 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003f30:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003f32:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 8003f36:	d406      	bmi.n	8003f46 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003f38:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003f3c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003f40:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8003f44:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003f46:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003f4a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003f4e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003f52:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8003f56:	4770      	bx	lr

08003f58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003f58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003f5a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003f5e:	f7fd fea9 	bl	8001cb4 <HAL_PCD_SetAddress>
 8003f62:	2803      	cmp	r0, #3
 8003f64:	bf96      	itet	ls
 8003f66:	4b02      	ldrls	r3, [pc, #8]	; (8003f70 <USBD_LL_SetUSBAddress+0x18>)
 8003f68:	2002      	movhi	r0, #2
 8003f6a:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003f6c:	bd08      	pop	{r3, pc}
 8003f6e:	bf00      	nop
 8003f70:	08004200 	.word	0x08004200

08003f74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003f74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003f76:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003f7a:	f7fd ff3b 	bl	8001df4 <HAL_PCD_EP_Transmit>
 8003f7e:	2803      	cmp	r0, #3
 8003f80:	bf96      	itet	ls
 8003f82:	4b02      	ldrls	r3, [pc, #8]	; (8003f8c <USBD_LL_Transmit+0x18>)
 8003f84:	2002      	movhi	r0, #2
 8003f86:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 8003f88:	bd08      	pop	{r3, pc}
 8003f8a:	bf00      	nop
 8003f8c:	08004200 	.word	0x08004200

08003f90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003f90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003f92:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003f96:	f7fd ff05 	bl	8001da4 <HAL_PCD_EP_Receive>
 8003f9a:	2803      	cmp	r0, #3
 8003f9c:	bf96      	itet	ls
 8003f9e:	4b02      	ldrls	r3, [pc, #8]	; (8003fa8 <USBD_LL_PrepareReceive+0x18>)
 8003fa0:	2002      	movhi	r0, #2
 8003fa2:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 8003fa4:	bd08      	pop	{r3, pc}
 8003fa6:	bf00      	nop
 8003fa8:	08004200 	.word	0x08004200

08003fac <__errno>:
 8003fac:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <__errno+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000164 	.word	0x20000164

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	4e0d      	ldr	r6, [pc, #52]	; (8003ff0 <__libc_init_array+0x38>)
 8003fbc:	4c0d      	ldr	r4, [pc, #52]	; (8003ff4 <__libc_init_array+0x3c>)
 8003fbe:	1ba4      	subs	r4, r4, r6
 8003fc0:	10a4      	asrs	r4, r4, #2
 8003fc2:	2500      	movs	r5, #0
 8003fc4:	42a5      	cmp	r5, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	4e0b      	ldr	r6, [pc, #44]	; (8003ff8 <__libc_init_array+0x40>)
 8003fca:	4c0c      	ldr	r4, [pc, #48]	; (8003ffc <__libc_init_array+0x44>)
 8003fcc:	f000 f8e2 	bl	8004194 <_init>
 8003fd0:	1ba4      	subs	r4, r4, r6
 8003fd2:	10a4      	asrs	r4, r4, #2
 8003fd4:	2500      	movs	r5, #0
 8003fd6:	42a5      	cmp	r5, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fe0:	4798      	blx	r3
 8003fe2:	3501      	adds	r5, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fea:	4798      	blx	r3
 8003fec:	3501      	adds	r5, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	0800420c 	.word	0x0800420c
 8003ff4:	0800420c 	.word	0x0800420c
 8003ff8:	0800420c 	.word	0x0800420c
 8003ffc:	08004210 	.word	0x08004210

08004000 <malloc>:
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <malloc+0xc>)
 8004002:	4601      	mov	r1, r0
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f000 b859 	b.w	80040bc <_malloc_r>
 800400a:	bf00      	nop
 800400c:	20000164 	.word	0x20000164

08004010 <free>:
 8004010:	4b02      	ldr	r3, [pc, #8]	; (800401c <free+0xc>)
 8004012:	4601      	mov	r1, r0
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	f000 b803 	b.w	8004020 <_free_r>
 800401a:	bf00      	nop
 800401c:	20000164 	.word	0x20000164

08004020 <_free_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4605      	mov	r5, r0
 8004024:	2900      	cmp	r1, #0
 8004026:	d045      	beq.n	80040b4 <_free_r+0x94>
 8004028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402c:	1f0c      	subs	r4, r1, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfb8      	it	lt
 8004032:	18e4      	addlt	r4, r4, r3
 8004034:	f000 f8ac 	bl	8004190 <__malloc_lock>
 8004038:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <_free_r+0x98>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	4610      	mov	r0, r2
 800403e:	b933      	cbnz	r3, 800404e <_free_r+0x2e>
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6014      	str	r4, [r2, #0]
 8004044:	4628      	mov	r0, r5
 8004046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800404a:	f000 b8a2 	b.w	8004192 <__malloc_unlock>
 800404e:	42a3      	cmp	r3, r4
 8004050:	d90c      	bls.n	800406c <_free_r+0x4c>
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	1862      	adds	r2, r4, r1
 8004056:	4293      	cmp	r3, r2
 8004058:	bf04      	itt	eq
 800405a:	681a      	ldreq	r2, [r3, #0]
 800405c:	685b      	ldreq	r3, [r3, #4]
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	bf04      	itt	eq
 8004062:	1852      	addeq	r2, r2, r1
 8004064:	6022      	streq	r2, [r4, #0]
 8004066:	6004      	str	r4, [r0, #0]
 8004068:	e7ec      	b.n	8004044 <_free_r+0x24>
 800406a:	4613      	mov	r3, r2
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	b10a      	cbz	r2, 8004074 <_free_r+0x54>
 8004070:	42a2      	cmp	r2, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x4a>
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	1858      	adds	r0, r3, r1
 8004078:	42a0      	cmp	r0, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x74>
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	4401      	add	r1, r0
 8004080:	1858      	adds	r0, r3, r1
 8004082:	4282      	cmp	r2, r0
 8004084:	6019      	str	r1, [r3, #0]
 8004086:	d1dd      	bne.n	8004044 <_free_r+0x24>
 8004088:	6810      	ldr	r0, [r2, #0]
 800408a:	6852      	ldr	r2, [r2, #4]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	4401      	add	r1, r0
 8004090:	6019      	str	r1, [r3, #0]
 8004092:	e7d7      	b.n	8004044 <_free_r+0x24>
 8004094:	d902      	bls.n	800409c <_free_r+0x7c>
 8004096:	230c      	movs	r3, #12
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	e7d3      	b.n	8004044 <_free_r+0x24>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	1821      	adds	r1, r4, r0
 80040a0:	428a      	cmp	r2, r1
 80040a2:	bf04      	itt	eq
 80040a4:	6811      	ldreq	r1, [r2, #0]
 80040a6:	6852      	ldreq	r2, [r2, #4]
 80040a8:	6062      	str	r2, [r4, #4]
 80040aa:	bf04      	itt	eq
 80040ac:	1809      	addeq	r1, r1, r0
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	605c      	str	r4, [r3, #4]
 80040b2:	e7c7      	b.n	8004044 <_free_r+0x24>
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
 80040b6:	bf00      	nop
 80040b8:	200001ec 	.word	0x200001ec

080040bc <_malloc_r>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	1ccd      	adds	r5, r1, #3
 80040c0:	f025 0503 	bic.w	r5, r5, #3
 80040c4:	3508      	adds	r5, #8
 80040c6:	2d0c      	cmp	r5, #12
 80040c8:	bf38      	it	cc
 80040ca:	250c      	movcc	r5, #12
 80040cc:	2d00      	cmp	r5, #0
 80040ce:	4606      	mov	r6, r0
 80040d0:	db01      	blt.n	80040d6 <_malloc_r+0x1a>
 80040d2:	42a9      	cmp	r1, r5
 80040d4:	d903      	bls.n	80040de <_malloc_r+0x22>
 80040d6:	230c      	movs	r3, #12
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	2000      	movs	r0, #0
 80040dc:	bd70      	pop	{r4, r5, r6, pc}
 80040de:	f000 f857 	bl	8004190 <__malloc_lock>
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <_malloc_r+0xac>)
 80040e4:	6814      	ldr	r4, [r2, #0]
 80040e6:	4621      	mov	r1, r4
 80040e8:	b991      	cbnz	r1, 8004110 <_malloc_r+0x54>
 80040ea:	4c20      	ldr	r4, [pc, #128]	; (800416c <_malloc_r+0xb0>)
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	b91b      	cbnz	r3, 80040f8 <_malloc_r+0x3c>
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 f83d 	bl	8004170 <_sbrk_r>
 80040f6:	6020      	str	r0, [r4, #0]
 80040f8:	4629      	mov	r1, r5
 80040fa:	4630      	mov	r0, r6
 80040fc:	f000 f838 	bl	8004170 <_sbrk_r>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d124      	bne.n	800414e <_malloc_r+0x92>
 8004104:	230c      	movs	r3, #12
 8004106:	6033      	str	r3, [r6, #0]
 8004108:	4630      	mov	r0, r6
 800410a:	f000 f842 	bl	8004192 <__malloc_unlock>
 800410e:	e7e4      	b.n	80040da <_malloc_r+0x1e>
 8004110:	680b      	ldr	r3, [r1, #0]
 8004112:	1b5b      	subs	r3, r3, r5
 8004114:	d418      	bmi.n	8004148 <_malloc_r+0x8c>
 8004116:	2b0b      	cmp	r3, #11
 8004118:	d90f      	bls.n	800413a <_malloc_r+0x7e>
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	50cd      	str	r5, [r1, r3]
 800411e:	18cc      	adds	r4, r1, r3
 8004120:	4630      	mov	r0, r6
 8004122:	f000 f836 	bl	8004192 <__malloc_unlock>
 8004126:	f104 000b 	add.w	r0, r4, #11
 800412a:	1d23      	adds	r3, r4, #4
 800412c:	f020 0007 	bic.w	r0, r0, #7
 8004130:	1ac3      	subs	r3, r0, r3
 8004132:	d0d3      	beq.n	80040dc <_malloc_r+0x20>
 8004134:	425a      	negs	r2, r3
 8004136:	50e2      	str	r2, [r4, r3]
 8004138:	e7d0      	b.n	80040dc <_malloc_r+0x20>
 800413a:	428c      	cmp	r4, r1
 800413c:	684b      	ldr	r3, [r1, #4]
 800413e:	bf16      	itet	ne
 8004140:	6063      	strne	r3, [r4, #4]
 8004142:	6013      	streq	r3, [r2, #0]
 8004144:	460c      	movne	r4, r1
 8004146:	e7eb      	b.n	8004120 <_malloc_r+0x64>
 8004148:	460c      	mov	r4, r1
 800414a:	6849      	ldr	r1, [r1, #4]
 800414c:	e7cc      	b.n	80040e8 <_malloc_r+0x2c>
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d005      	beq.n	8004164 <_malloc_r+0xa8>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4630      	mov	r0, r6
 800415c:	f000 f808 	bl	8004170 <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d0cf      	beq.n	8004104 <_malloc_r+0x48>
 8004164:	6025      	str	r5, [r4, #0]
 8004166:	e7db      	b.n	8004120 <_malloc_r+0x64>
 8004168:	200001ec 	.word	0x200001ec
 800416c:	200001f0 	.word	0x200001f0

08004170 <_sbrk_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4c06      	ldr	r4, [pc, #24]	; (800418c <_sbrk_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4605      	mov	r5, r0
 8004178:	4608      	mov	r0, r1
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	f7fc fc40 	bl	8000a00 <_sbrk>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_sbrk_r+0x1a>
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	b103      	cbz	r3, 800418a <_sbrk_r+0x1a>
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000b90 	.word	0x20000b90

08004190 <__malloc_lock>:
 8004190:	4770      	bx	lr

08004192 <__malloc_unlock>:
 8004192:	4770      	bx	lr

08004194 <_init>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr

080041a0 <_fini>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr
